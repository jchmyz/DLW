"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var core_1 = require("@blueprintjs/core");
var DateTimePicker = require("react-datetime");
var moment = require("moment");
var Requests_1 = require("./Requests");
var cjs_1 = require("@blueprintjs/core/lib/cjs");
var NumberInput_1 = require("./NumberInput");
var utilities_1 = require("./utilities");
var DeltaScatterChart_1 = require("./DeltaScatterChart");
var DEUTERIUM = "Deuterium";
var OXYGEN = "Oxygen 18";
var ELEMENTS = [DEUTERIUM, OXYGEN];
var NUM_SAMPLE_TIMES = 6;
var NUM_DELTAS = 5;
exports.DATE_LABELS = ['Background', 'Dose', 'PDA', 'PDB', 'EDA', 'EDB'];
exports.SAMPLE_LABELS = [exports.DATE_LABELS[0]].concat(exports.DATE_LABELS.slice(2, 6));
var DeltaUnits;
(function (DeltaUnits) {
    DeltaUnits["permil"] = "permil";
    DeltaUnits["ppm"] = "ppm";
})(DeltaUnits || (DeltaUnits = {}));
var AppToaster = core_1.Toaster.create({ className: "app-toaster", position: core_1.Position.TOP_RIGHT });
var DLWApp = /** @class */ (function (_super) {
    __extends(DLWApp, _super);
    function DLWApp(props) {
        var _this = _super.call(this, props) || this;
        _this.export = function () { return __awaiter(_this, void 0, void 0, function () {
            var results;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        results = null;
                        if (!(this.state.new_csv_name.length > 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, Requests_1.export_to_csv(this.state.new_csv_name)];
                    case 1:
                        results = _a.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, Requests_1.export_to_csv(this.state.append_csv_name)];
                    case 3:
                        results = _a.sent();
                        _a.label = 4;
                    case 4:
                        if (results.error) {
                            AppToaster.show({
                                message: "Error exporting results to csv. Please file a bug report at https://github.com/jchmyz/DoublyLabeledWater/issues",
                                intent: "danger",
                                timeout: 0
                            });
                        }
                        else {
                            AppToaster.show({
                                message: "Results successfully exported to " + results.saved_file,
                                intent: "success",
                                timeout: 3000
                            });
                        }
                        return [2 /*return*/];
                }
            });
        }); };
        _this.submit_inputs = function () { return __awaiter(_this, void 0, void 0, function () {
            var datetimes, calculated_results;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        datetimes = this.state.datetimes.map(function (value) {
                            return value.toArray();
                        });
                        // months are zero-indexed in Moment.js
                        datetimes.map(function (value) {
                            return value.splice(1, 1, value[1] + 1);
                        });
                        return [4 /*yield*/, Requests_1.calculate_from_inputs({
                                d_meas: this.state.deuterium_deltas,
                                o18_meas: this.state.oxygen_deltas,
                                datetimes: datetimes,
                                dose_weights: this.state.dose_weights,
                                dose_enrichments: this.state.dose_enrichments,
                                subject_weights: this.state.subject_weights,
                                subject_id: this.state.subject_id,
                                mixed_dose: this.state.mixed_dose,
                                in_permil: (this.state.delta_units === DeltaUnits.permil)
                            })];
                    case 1:
                        calculated_results = _a.sent();
                        if (calculated_results.results) {
                            this.setState({
                                results: {
                                    results: {
                                        calculations: calculated_results.results.calculations,
                                        schoeller: {
                                            rco2_ee_int: calculated_results.results.schoeller.rco2_ee_int,
                                            rco2_ee_plat: calculated_results.results.schoeller.rco2_ee_plat,
                                        },
                                        racette: {
                                            rco2_ee_int: calculated_results.results.racette.rco2_ee_int,
                                            rco2_ee_plat: calculated_results.results.racette.rco2_ee_plat
                                        },
                                        speakman: {
                                            rco2_ee_int: calculated_results.results.speakman.rco2_ee_int,
                                            rco2_ee_plat: calculated_results.results.speakman.rco2_ee_plat
                                        },
                                        error_flags: calculated_results.results.error_flags
                                    }
                                }
                            });
                            AppToaster.show({
                                message: "Results calculated successfully", intent: "success", timeout: 3000
                            });
                            if (this.scroll_anchor_ref.current)
                                this.scroll_anchor_ref.current.scrollIntoView({ behavior: "smooth" });
                        }
                        return [2 /*return*/];
                }
            });
        }); };
        _this.clear = function () {
            _this.setState({
                clear_popup_open: false,
                input_csv_name: "",
                deuterium_deltas: ["", "", "", "", ""],
                oxygen_deltas: ["", "", "", "", ""],
                datetimes: [_this.now, _this.now, _this.now, _this.now, _this.now, _this.now],
                dose_weights: ["", ""],
                dose_enrichments: ["", ""],
                subject_weights: ["", ""],
                dilution_space_ratio: "",
                subject_id: "",
                deuterium_deltas_validated: false,
                oxygen_deltas_validated: false,
                datetimes_validated: false,
                dose_weights_validated: false,
                dose_enrichments_validated: false,
                subject_weights_validated: false,
                results: { results: null },
            });
            // @ts-ignore
            document.getElementById('file-input').value = null;
        };
        _this.handle_csv_upload = function (event) { return __awaiter(_this, void 0, void 0, function () {
            var file, inputs, r, hit_error, inputted_d_deltas, inputted_o_deltas, i, inputted_dates, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        file = event.target.files[0];
                        console.log(file);
                        if (!((file.type === "text/csv" || file.type === "application/vnd.ms-excel") || (file.type === "" && file.name.endsWith(".csv")))) return [3 /*break*/, 2];
                        return [4 /*yield*/, Requests_1.load_from_csv(file)];
                    case 1:
                        inputs = _a.sent();
                        if (inputs.error || (inputs.results == null)) {
                            AppToaster.show({
                                message: "Error reading input CSV file. For formatting help, press 'Help' in the upper right hand corner",
                                intent: "danger",
                                timeout: 0
                            });
                        }
                        else {
                            this.clear();
                            this.setState({ input_csv_name: file.name });
                            r = inputs.results;
                            hit_error = false;
                            try {
                                inputted_d_deltas = [r.d_meas_1, r.d_meas_2, r.d_meas_3, r.d_meas_4, r.d_meas_5];
                                inputted_o_deltas = [r.o_meas_1, r.o_meas_2, r.o_meas_3, r.o_meas_4, r.o_meas_5];
                                for (i = 0; i < NUM_DELTAS; i++) {
                                    this.handle_deuterium_delta_change(i, inputted_d_deltas[i]);
                                    this.handle_oxygen_delta_change(i, inputted_o_deltas[i]);
                                }
                            }
                            catch (e) {
                                hit_error = true;
                            }
                            try {
                                inputted_dates = [r.sample_time_1, r.sample_time_2, r.sample_time_3, r.sample_time_4, r.sample_time_5, r.sample_time_6];
                                for (i = 0; i < NUM_SAMPLE_TIMES; i++) {
                                    if (inputted_dates[i]) {
                                        this.handle_date_change(i, inputted_dates[i]);
                                    }
                                }
                            }
                            catch (e) {
                                hit_error = true;
                            }
                            try {
                                if (r.dose_weight) {
                                    this.setState({ mixed_dose: true });
                                    this.handle_dose_weight_change(0, r.dose_weight);
                                }
                                else if (r.dose_weight_d && r.dose_weight_o) {
                                    this.handle_dose_weight_change(0, r.dose_weight_d);
                                    this.handle_dose_weight_change(1, r.dose_weight_o);
                                }
                            }
                            catch (e) {
                                hit_error = true;
                            }
                            try {
                                this.handle_dose_enrichment_change(0, r.dose_enrichment_d);
                                this.handle_dose_enrichment_change(1, r.dose_enrichment_o);
                                this.handle_subject_weight_change(0, r.subject_weight_initial);
                                this.handle_subject_weight_change(1, r.subject_weight_final);
                                this.handle_dilution_space_ratio_change(0, r.pop_dilution_space_ratio);
                                this.handle_subject_id_change(r.subject_id);
                            }
                            catch (e) {
                                hit_error = true;
                            }
                            if (hit_error) {
                                AppToaster.show({
                                    message: "One or more values not inputted automatically. Add manually, or fix CSV format." +
                                        " For formatting help, press 'Help' in the upper right hand corner",
                                    intent: "danger",
                                    timeout: 0
                                });
                            }
                            else {
                                AppToaster.show({
                                    message: "Inputs successfully loaded from ".concat(this.state.input_csv_name),
                                    intent: "primary",
                                    timeout: 3000
                                });
                            }
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        AppToaster.show({
                            message: "Select a .csv file. For formatting help, press 'Help' in the upper right hand corner",
                            intent: "danger",
                            timeout: 0
                        });
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        }); };
        _this.handle_csv_append_choice = function (event) {
            var file = event.target.files[0];
            console.log(file);
            if ((file.type === "text/csv" || file.type === "application/vnd.ms-excel") || (file.type === "" && file.name.endsWith(".csv"))) {
                _this.setState({ append_csv_name: file.name, new_csv_name: "" });
            }
            else {
                AppToaster.show({
                    message: "Select an existing .csv file.",
                    intent: "danger",
                    timeout: 0
                });
            }
        };
        _this._bad_format = function (specific_error) {
            _this.setState({ input_csv_name: "" });
            var display_msg = "Incorrect .csv format." + specific_error + " See 'Help' for expected format.";
            AppToaster.show({ message: display_msg, intent: "danger", timeout: 0 });
        };
        _this._error_handler = function (event) {
            // @ts-ignore
            if (event.target.error.name == "NotReadableError") {
                AppToaster.show({
                    message: "File not readable. For formatting help, press 'Help' in the upper right hand corner",
                    intent: "danger",
                    timeout: 0
                });
            }
        };
        _this.check_numerical_inputs = function (input_aray) {
            for (var _i = 0, input_aray_1 = input_aray; _i < input_aray_1.length; _i++) {
                var value = input_aray_1[_i];
                if (isNaN(+value) || value === "") {
                    return false;
                }
            }
            return true;
        };
        _this._flag_non_numerical_input = function () {
            AppToaster.show({ message: "Enter a numeric value", intent: "danger", timeout: 3000 });
        };
        _this._flag_non_date_input = function () {
            AppToaster.show({ message: "Enter a valid date", intent: "danger", timeout: 3000 });
        };
        _this.handle_deuterium_delta_change = function (index, event) {
            var value = (typeof event === "string") ? event : event.target.value;
            var values_sep_by_spaces = value.split(" ");
            values_sep_by_spaces = values_sep_by_spaces.filter(function (value) { return value !== ""; });
            if (values_sep_by_spaces.length === 1 || value === "") {
                if (!isNaN(+value) || value === "") {
                    var new_deltas = _this.state.deuterium_deltas;
                    new_deltas.splice(index, 1, value);
                    _this.setState({
                        deuterium_deltas: new_deltas,
                        deuterium_deltas_validated: _this.check_numerical_inputs(new_deltas)
                    });
                }
                else
                    _this._flag_non_numerical_input();
            }
            else {
                for (var i = 0; i < values_sep_by_spaces.length; i++) {
                    _this.handle_deuterium_delta_change(index + i, values_sep_by_spaces[i]);
                }
            }
        };
        _this.handle_oxygen_delta_change = function (index, event) {
            var value = (typeof event === "string") ? event : event.target.value;
            var values_sep_by_spaces = value.split(" ");
            values_sep_by_spaces = values_sep_by_spaces.filter(function (value) { return value !== ""; });
            if (values_sep_by_spaces.length === 1 || value === "") {
                if (!isNaN(+value) || (value === "")) {
                    var new_deltas = _this.state.oxygen_deltas;
                    new_deltas.splice(index, 1, value);
                    _this.setState({
                        oxygen_deltas: new_deltas,
                        oxygen_deltas_validated: _this.check_numerical_inputs(new_deltas)
                    });
                }
                else
                    _this._flag_non_numerical_input();
            }
            else {
                for (var i = 0; i < values_sep_by_spaces.length; i++) {
                    _this.handle_oxygen_delta_change(index + i, values_sep_by_spaces[i]);
                }
            }
        };
        _this.handle_date_change = function (index, value) {
            var new_date_array = _this.state.datetimes;
            if (typeof value != "string") {
                var all_dates_filled = true;
                for (var j = 0; j < index; j++) {
                    if ((new_date_array[j] != _this.now) && value.isBefore(new_date_array[j])) {
                        AppToaster.show({
                            message: "Collection dates must be in chronological order.",
                            intent: "danger",
                            timeout: 0
                        });
                        return;
                    }
                    else if (value.isSame(new_date_array[j])) {
                        AppToaster.show({
                            message: "Duplicate collection dates entered", intent: "danger", timeout: 0
                        });
                        return;
                    }
                }
                new_date_array.splice(index, 1, value);
                for (var _i = 0, new_date_array_1 = new_date_array; _i < new_date_array_1.length; _i++) {
                    var date = new_date_array_1[_i];
                    if (date === _this.now) {
                        all_dates_filled = false;
                        break;
                    }
                }
                _this.setState({
                    datetimes: new_date_array,
                    datetimes_validated: all_dates_filled,
                });
            }
            else {
                var split_values = value.split(" ");
                if (value === "") {
                    new_date_array.splice(index, 1, _this.now);
                    _this.setState({ datetimes: new_date_array, datetimes_validated: false });
                }
                else {
                    var i = 0;
                    var skipped_indices = 0; // track indices to place dates in correct boxes
                    while (i < split_values.length) {
                        // deal with spaces between date and time
                        if (moment.parseZone(new Date(split_values[i])).isValid()) {
                            if (i < split_values.length - 1) {
                                if (moment.parseZone(new Date(split_values[i + 1])).isValid()) {
                                    //both valid dates- don't need to worry about spaces, treat them as separate dates
                                    var as_moment = utilities_1.default(split_values[i]);
                                    if (typeof as_moment !== "boolean") {
                                        _this.handle_date_change(index + i, as_moment);
                                    }
                                    i++;
                                }
                                else { // next value isn't a valid date- likely a time. tack it onto the date
                                    var as_moment = utilities_1.default(split_values[i].concat(" ", split_values[i + 1]));
                                    if (typeof as_moment !== "boolean") {
                                        _this.handle_date_change(index + i - skipped_indices, as_moment);
                                    }
                                    skipped_indices++;
                                    i += 2;
                                }
                            }
                            else {
                                var as_moment = utilities_1.default(split_values[i]);
                                if (typeof as_moment !== "boolean") {
                                    _this.handle_date_change(index + i, as_moment);
                                }
                                i++;
                            }
                        }
                        else {
                            _this._flag_non_date_input();
                            i++;
                        }
                    }
                }
            }
        };
        _this.handle_dose_weight_change = function (index, event) {
            if (_this.state.mixed_dose) {
                // if mixed, set both values to this
                _this.handle_dose_weight_change(1, event);
            }
            var value = (typeof event == "string") ? event : event.target.value;
            var values_sep_by_spaces = value.split(" ");
            values_sep_by_spaces = values_sep_by_spaces.filter(function (value) { return value !== ""; });
            if (values_sep_by_spaces.length === 1 || value === "") {
                if (!isNaN(+value) || value === "") {
                    var new_dose_weights = _this.state.dose_weights;
                    new_dose_weights.splice(index, 1, value);
                    _this.setState({
                        dose_weights: new_dose_weights,
                        dose_weights_validated: _this.check_numerical_inputs(new_dose_weights)
                    });
                }
                else
                    _this._flag_non_numerical_input();
            }
            else {
                for (var i = 0; i < values_sep_by_spaces.length; i++) {
                    _this.handle_dose_weight_change(index + i, values_sep_by_spaces[i]);
                }
            }
        };
        _this.handle_dose_enrichment_change = function (index, event) {
            var value = (typeof event == "string") ? event : event.target.value;
            var values_sep_by_spaces = value.split(" ");
            values_sep_by_spaces = values_sep_by_spaces.filter(function (value) { return value !== ""; });
            if (values_sep_by_spaces.length === 1 || value === "") {
                if (!isNaN(+value) || value === "") {
                    var new_enrichments = _this.state.dose_enrichments;
                    new_enrichments.splice(index, 1, value);
                    _this.setState({
                        dose_enrichments: new_enrichments,
                        dose_enrichments_validated: _this.check_numerical_inputs(new_enrichments)
                    });
                }
                else
                    _this._flag_non_numerical_input();
            }
            else {
                for (var i = 0; i < values_sep_by_spaces.length; i++) {
                    _this.handle_dose_enrichment_change(index + i, values_sep_by_spaces[i]);
                }
            }
        };
        _this.handle_subject_weight_change = function (index, event) {
            var value = (typeof event == "string") ? event : event.target.value;
            var values_sep_by_spaces = value.split(" ");
            values_sep_by_spaces = values_sep_by_spaces.filter(function (value) { return value !== ""; });
            if (values_sep_by_spaces.length === 1 || value === "") {
                if (!isNaN(+value) || value === "") {
                    var new_weights = _this.state.subject_weights;
                    new_weights.splice(index, 1, value);
                    _this.setState({
                        subject_weights: new_weights,
                        subject_weights_validated: _this.check_numerical_inputs(new_weights)
                    });
                }
                else
                    _this._flag_non_numerical_input();
            }
            else {
                for (var i = 0; i < values_sep_by_spaces.length; i++) {
                    _this.handle_subject_weight_change(index + i, values_sep_by_spaces[i]);
                }
            }
        };
        _this.handle_subject_id_change = function (event) {
            if (_this.state.results.results) {
                _this.setState({ clear_popup_open: true });
            }
            var value = (typeof event == "string") ? event : event.target.value;
            _this.setState({ subject_id: value });
        };
        _this.handle_dilution_space_ratio_change = function (index, event) {
            var value = (typeof event == "string") ? event : event.target.value;
            _this.setState({ dilution_space_ratio: value });
        };
        _this.now = moment();
        _this.scroll_anchor_ref = React.createRef();
        _this.state = {
            input_csv_name: "",
            info_overlay_open: false,
            clear_popup_open: false,
            delta_units: DeltaUnits.permil,
            deuterium_deltas: ["", "", "", "", ""],
            oxygen_deltas: ["", "", "", "", ""],
            datetimes: [_this.now, _this.now, _this.now, _this.now, _this.now, _this.now],
            dose_weights: ["", ""],
            dose_enrichments: ["", ""],
            mixed_dose: false,
            subject_weights: ["", ""],
            dilution_space_ratio: "",
            subject_id: "",
            deuterium_deltas_validated: false,
            oxygen_deltas_validated: false,
            datetimes_validated: false,
            dose_weights_validated: false,
            dose_enrichments_validated: false,
            subject_weights_validated: false,
            results: { results: null },
            new_csv_name: "", append_csv_name: ""
        };
        return _this;
    }
    DLWApp.prototype.render = function () {
        var _this = this;
        var all_inputs_validated = (this.state.deuterium_deltas_validated && this.state.oxygen_deltas_validated
            && this.state.datetimes_validated && this.state.dose_weights_validated
            && this.state.dose_enrichments_validated && this.state.subject_weights_validated
            && this.state.subject_id);
        var deuterium_delta_inputs = [];
        var oxygen_delta_inputs = [];
        var collection_time_inputs = [];
        var _loop_1 = function (i) {
            collection_time_inputs.push(React.createElement(DateTimePicker, { onChange: function (value) { return _this.handle_date_change(i, value); }, inputProps: {
                    className: 'date-input-box .bp3-input',
                    placeholder: ' ' + exports.DATE_LABELS[i] + ' sample date and time',
                    value: (this_1.state.datetimes[i] === this_1.now) ? "" : this_1.state.datetimes[i].format('YYYY-MM-DD HH:mm')
                }, key: i, value: this_1.state.datetimes[i], dateFormat: "YYYY-MM-DD", timeFormat: "HH:mm" }));
        };
        var this_1 = this;
        for (var i = 0; i < NUM_SAMPLE_TIMES; i++) {
            _loop_1(i);
        }
        for (var i = 0; i < NUM_DELTAS; i++) {
            deuterium_delta_inputs.push(React.createElement(NumberInput_1.NumberInput, { placeholder: exports.SAMPLE_LABELS[i] + " Deuterium delta", index: i, key: i, change_function: this.handle_deuterium_delta_change, unit: this.state.delta_units, value: this.state.deuterium_deltas[i] }));
            oxygen_delta_inputs.push(React.createElement(NumberInput_1.NumberInput, { placeholder: exports.SAMPLE_LABELS[i] + ' Oxygen 18 delta', index: i, key: i, unit: this.state.delta_units, change_function: this.handle_oxygen_delta_change, value: this.state.oxygen_deltas[i] }));
        }
        deuterium_delta_inputs.splice(1, 0, React.createElement("div", { className: 'delta-space' }));
        oxygen_delta_inputs.splice(1, 0, React.createElement("div", { className: 'delta-space' }));
        var dose_weight_inputs = [];
        var dose_enrichment_inputs = [];
        for (var i = 0; i < ELEMENTS.length; i++) {
            if (!this.state.mixed_dose) {
                dose_weight_inputs.push(React.createElement(NumberInput_1.NumberInput, { placeholder: ELEMENTS[i] + ' dose weight (g)', index: i, key: i, unit: "g", change_function: this.handle_dose_weight_change, value: this.state.dose_weights[i] }));
            }
            dose_enrichment_inputs.push(React.createElement(NumberInput_1.NumberInput, { placeholder: ELEMENTS[i] + ' dose enrichment (ppm)', index: i, key: i, change_function: this.handle_dose_enrichment_change, value: this.state.dose_enrichments[i], unit: "ppm" }));
        }
        if (this.state.mixed_dose) {
            dose_weight_inputs.push(React.createElement(NumberInput_1.NumberInput, { placeholder: "Dose weight (g)", index: 0, value: this.state.dose_weights[0], unit: "g", change_function: this.handle_dose_weight_change }));
        }
        var results_display = React.createElement("div", null);
        if (this.state.results.results) {
            var results_calculations = [];
            var results_error_flags = [];
            var results_schoeller_int = [];
            var results_schoeller_plat = [];
            var results_racette_int = [];
            var results_racette_plat = [];
            var results_speakman_int = [];
            var results_speakman_plat = [];
            results_calculations.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.results.calculations.ndp_kg[0] + ":"),
                React.createElement("p", { className: "result-value" }, this.state.results.results.calculations.ndp_kg[1] + " kg")));
            results_calculations.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.results.calculations.kd_hr[0] + ":"),
                React.createElement("p", { className: "result-value" }, this.state.results.results.calculations.kd_hr[1])));
            results_calculations.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.results.calculations.nop_kg[0] + ":"),
                React.createElement("p", { className: "result-value" }, this.state.results.results.calculations.nop_kg[1] + " kg")));
            results_calculations.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.results.calculations.ko_hr[0] + ":"),
                React.createElement("p", { className: "result-value" }, this.state.results.results.calculations.ko_hr[1])));
            results_calculations.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.results.calculations.body_water_avg_kg[0] + ":"),
                React.createElement("p", { className: "result-value" }, this.state.results.results.calculations.body_water_avg_kg[1] + " kg")));
            results_calculations.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.results.calculations.fat_free_mass_kg[0] + ":"),
                React.createElement("p", { className: "result-value" }, this.state.results.results.calculations.fat_free_mass_kg[1] + " kg")));
            results_calculations.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.results.calculations.fat_mass_kg[0] + ":"),
                React.createElement("p", { className: "result-value" }, this.state.results.results.calculations.fat_mass_kg[1] + " kg")));
            results_calculations.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.results.calculations.body_fat_percentage[0] + ":"),
                React.createElement("p", { className: "result-value" }, this.state.results.results.calculations.body_fat_percentage[1] + "%")));
            function push_calculated_results(element, result_set) {
                element.push(React.createElement("div", { className: 'result-pair' },
                    React.createElement("p", { className: "result-label" }, result_set.rco2_mol_day[0] + ":"),
                    React.createElement("p", { className: "result-value" }, result_set.rco2_mol_day[1] + " mol/day")));
                element.push(React.createElement("div", { className: 'result-pair' },
                    React.createElement("p", { className: "result-label" }, result_set.rco2_l_hr[0] + ":"),
                    React.createElement("p", { className: "result-value" }, result_set.rco2_l_hr[1] + " L/day")));
                element.push(React.createElement("div", { className: 'result-pair' },
                    React.createElement("p", { className: "result-label" }, result_set.ee_kcal_day[0] + ":"),
                    React.createElement("p", { className: "result-value" }, result_set.ee_kcal_day[1] + " kcal/day")));
                element.push(React.createElement("div", { className: 'result-pair' },
                    React.createElement("p", { className: "result-label" }, result_set.ee_mj_day[0] + ":"),
                    React.createElement("p", { className: "result-value" }, result_set.ee_mj_day[1] + " MJ/day")));
            }
            push_calculated_results(results_schoeller_int, this.state.results.results.schoeller.rco2_ee_int);
            push_calculated_results(results_schoeller_plat, this.state.results.results.schoeller.rco2_ee_plat);
            push_calculated_results(results_racette_int, this.state.results.results.racette.rco2_ee_int);
            push_calculated_results(results_racette_plat, this.state.results.results.racette.rco2_ee_plat);
            push_calculated_results(results_speakman_int, this.state.results.results.speakman.rco2_ee_int);
            push_calculated_results(results_speakman_plat, this.state.results.results.speakman.rco2_ee_plat);
            var error_okay = "error-okay";
            var outside_error_bars = "error-not-okay";
            var error_class = ((parseFloat(this.state.results.results.error_flags.plateau_2h[1]) < 0.05) ? error_okay : outside_error_bars);
            results_error_flags.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.results.error_flags.plateau_2h[0] + ":"),
                React.createElement("p", { className: "result-value " + error_class }, this.state.results.results.error_flags.plateau_2h[1] + '%')));
            error_class = ((parseFloat(this.state.results.results.error_flags.plateau_180[1]) < 0.05) ? error_okay : outside_error_bars);
            results_error_flags.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.results.error_flags.plateau_180[0] + ":"),
                React.createElement("p", { className: "result-value " + error_class }, this.state.results.results.error_flags.plateau_180[1] + '%')));
            error_class = ((parseFloat(this.state.results.results.error_flags.ds_ratio[1]) < 1.070 &&
                parseFloat(this.state.results.results.error_flags.ds_ratio[1]) > 1) ? error_okay : outside_error_bars);
            results_error_flags.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.results.error_flags.ds_ratio[0] + ":"),
                React.createElement("p", { className: "result-value " + error_class }, this.state.results.results.error_flags.ds_ratio[1])));
            error_class = ((parseFloat(this.state.results.results.error_flags.ee[1]) < 10) ? error_okay : outside_error_bars);
            results_error_flags.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.results.error_flags.ee[0] + ":"),
                React.createElement("p", { className: "result-value " + error_class }, this.state.results.results.error_flags.ee[1] + "%")));
            error_class = ((parseFloat(this.state.results.results.error_flags.ko_kd[1]) < 1.7 &&
                parseFloat(this.state.results.results.error_flags.ko_kd[1]) > 1.1) ? error_okay : outside_error_bars);
            results_error_flags.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.results.error_flags.ko_kd[0] + ":"),
                React.createElement("p", { className: "result-value " + error_class }, this.state.results.results.error_flags.ko_kd[1])));
            var chart_data_d_meas = [];
            var chart_data_o18_meas = [];
            for (var i = 0; i < this.state.deuterium_deltas.length; i++) {
                chart_data_d_meas.push({ x: i, y: this.state.deuterium_deltas[i] });
                chart_data_o18_meas.push({ x: i, y: this.state.oxygen_deltas[i] });
            }
            var deltas_chart = (React.createElement(DeltaScatterChart_1.DeltaScatterChart, { delta_units: this.state.delta_units, chart_data_d_meas: chart_data_d_meas, chart_data_o18_meas: chart_data_o18_meas }));
            results_display = (React.createElement("div", { className: 'results-display', ref: this.scroll_anchor_ref },
                React.createElement(cjs_1.Card, { className: 'results-card' },
                    React.createElement("h1", null, 'Results for subject ' + this.state.subject_id),
                    React.createElement("div", { className: 'result-sections' },
                        React.createElement("div", { className: 'result-section' },
                            React.createElement("h5", { className: 'result-header-calc' }, "Calculations"),
                            results_calculations),
                        React.createElement("div", { className: 'result-section error-flags' },
                            React.createElement("h5", { className: 'result-header-error' }, "Error Flags"),
                            results_error_flags))),
                React.createElement(cjs_1.Card, { className: 'results-card' },
                    React.createElement("div", { className: 'result-sections calculation-types' },
                        React.createElement("div", { className: 'result-section' },
                            React.createElement("h2", null, "Schoeller"),
                            React.createElement("h5", { className: 'result-header-calc' }, "rCO2 and EE, intercept method"),
                            results_schoeller_int,
                            React.createElement("h5", { className: 'result-header-calc' }, "rCO2 and EE, plateau method"),
                            results_schoeller_plat),
                        React.createElement("div", { className: 'result-section' },
                            React.createElement("h2", null, "Racette"),
                            React.createElement("h5", { className: 'result-header-calc' }, "rCO2 and EE, intercept method"),
                            results_racette_int,
                            React.createElement("h5", { className: 'result-header-calc' }, "rCO2 and EE, plateau method"),
                            results_racette_plat),
                        React.createElement("div", { className: 'result-section' },
                            React.createElement("h2", null, "Speakman"),
                            React.createElement("h5", { className: 'result-header-calc' }, "rCO2 and EE, intercept method"),
                            results_speakman_int,
                            React.createElement("h5", { className: 'result-header-calc' }, "rCO2 and EE, plateau method"),
                            results_speakman_plat))),
                React.createElement(cjs_1.Card, { className: 'results-card' },
                    React.createElement("div", { className: 'result-sections' },
                        React.createElement("div", { className: 'result-section' },
                            React.createElement("h5", { className: 'chart-title' }, "Deuterium/18O Measured Enrichments"),
                            deltas_chart)))));
        }
        return (React.createElement(cjs_1.Navbar, { className: 'dlw-nav' },
            React.createElement(core_1.Dialog, { isOpen: this.state.info_overlay_open, canEscapeKeyClose: true, canOutsideClickClose: false, hasBackdrop: true, isCloseButtonShown: true, onClose: function () {
                    _this.setState({ info_overlay_open: false });
                }, title: 'How to use the Doubly Labeled Water App' },
                React.createElement("p", { className: 'help-paragraph' },
                    "Mixed Dose: If checked, enter 18O and 2H enrichments of the dose as measured ",
                    React.createElement("strong", null, "after"),
                    " mixing.")),
            React.createElement(cjs_1.NavbarGroup, { align: core_1.Alignment.LEFT },
                React.createElement(cjs_1.Navbar.Heading, { className: 'dlw-title' }, "Doubly Labeled Water")),
            React.createElement(cjs_1.NavbarGroup, { align: core_1.Alignment.RIGHT },
                React.createElement(cjs_1.NavbarHeading, { className: 'tagline' }, "an open source project"),
                React.createElement("img", { src: "assets/logo_cuhs.png", alt: "University of Colorado Anschutz Medical Campus logo", style: { 'height': 30 } }),
                React.createElement(cjs_1.NavbarDivider, null),
                React.createElement("a", { href: "https://github.com/jchmyz/DoublyLabeledWater", target: "_blank" }, "DoublyLabeledWater on GitHub"),
                React.createElement(cjs_1.NavbarDivider, null),
                React.createElement(core_1.Button, { icon: "help", minimal: true, onClick: function () { return _this.setState({ info_overlay_open: true }); } }, "Help")),
            React.createElement(core_1.FormGroup, { className: 'dlw-app' },
                React.createElement("div", { className: 'subject-clear' },
                    React.createElement("div", null,
                        React.createElement("h5", null, "Subject ID"),
                        React.createElement(core_1.Popover, { isOpen: this.state.clear_popup_open, position: "right", content: React.createElement("div", { className: 'clear-popover' },
                                React.createElement("p", { className: 'help-paragraph' }, "Entering a new subject ID. Clear data inputs?"),
                                React.createElement("div", { className: 'popover-button-container' },
                                    React.createElement(core_1.Button, { className: 'popover-button', onClick: this.clear }, "CLEAR INPUTS"),
                                    React.createElement(core_1.Button, { className: 'popover-button', onClick: function () { return _this.setState({ clear_popup_open: false }); } }, "KEEP INPUTS"))) },
                            React.createElement(core_1.InputGroup, { leftIcon: (this.state.subject_id ? "tick" : "circle-arrow-right"), className: '.bp3-fill subject-id', onChange: this.handle_subject_id_change, placeholder: 'ID', value: this.state.subject_id }))),
                    React.createElement("div", null,
                        React.createElement(core_1.Button, { className: 'clear-button', onClick: this.clear }, "CLEAR INPUTS"))),
                React.createElement("div", { className: 'load-from-csv' },
                    React.createElement("h5", null, "Load input data from .csv file"),
                    React.createElement(core_1.FileInput, { text: this.state.input_csv_name || "Choose file...", inputProps: {
                            'accept': '.csv',
                            'id': 'file-input'
                        }, onInputChange: this.handle_csv_upload, disabled: !!(this.state.input_csv_name) })),
                React.createElement("div", { className: 'samples' },
                    React.createElement("div", { className: 'date-inputs' },
                        React.createElement("h5", null, "Collection Dates and Times"),
                        collection_time_inputs),
                    React.createElement("div", { className: 'delta-inputs' },
                        React.createElement("h5", null, "Deuterium Delta Values"),
                        deuterium_delta_inputs),
                    React.createElement("div", { className: 'delta-inputs' },
                        React.createElement("h5", null, "Oxygen 18 Delta Values"),
                        oxygen_delta_inputs),
                    React.createElement("div", { className: 'delta-unit-radio' },
                        React.createElement(core_1.RadioGroup, { onChange: function (event) {
                                _this.setState({ delta_units: event.target.value });
                            }, selectedValue: this.state.delta_units },
                            React.createElement(core_1.Radio, { label: "permil", value: DeltaUnits.permil, large: true }),
                            React.createElement(core_1.Radio, { label: "ppm", value: DeltaUnits.ppm, large: true })))),
                React.createElement("div", { className: 'element-wise-inputs' },
                    React.createElement("div", { className: 'mixed-dose' },
                        React.createElement("div", { className: 'mixed-dose-box' },
                            React.createElement(core_1.Checkbox, { checked: this.state.mixed_dose, labelElement: React.createElement("h5", null, "Mixed Dose"), large: true, onChange: function () {
                                    _this.setState({ mixed_dose: !_this.state.mixed_dose });
                                }, alignIndicator: core_1.Alignment.RIGHT })),
                        React.createElement(core_1.Button, { icon: "help", minimal: true, className: 'mixed-dose-help-button', onClick: function () { return _this.setState({ info_overlay_open: true }); } }))),
                React.createElement("div", { className: 'element-wise-inputs' },
                    React.createElement("div", { className: 'inputs-by-element' },
                        React.createElement("h5", null, ((this.state.mixed_dose) ? 'Dose Weight' : 'Dose Weights')),
                        dose_weight_inputs),
                    React.createElement("div", { className: 'inputs-by-element' },
                        React.createElement("h5", null, ((this.state.mixed_dose) ? 'Mixed Dose Enrichments' : 'Dose Enrichments')),
                        dose_enrichment_inputs)),
                React.createElement("div", { className: 'element-wise-inputs' },
                    React.createElement("div", { className: 'inputs-by-element' },
                        React.createElement("h5", null, "Subject Weight"),
                        React.createElement(NumberInput_1.NumberInput, { placeholder: "Initial subject weight (kg)", index: 0, change_function: this.handle_subject_weight_change, unit: 'kg', value: this.state.subject_weights[0] }),
                        React.createElement(NumberInput_1.NumberInput, { placeholder: "Final subject weight (kg)", index: 1, change_function: this.handle_subject_weight_change, unit: 'kg', value: this.state.subject_weights[1] })),
                    React.createElement("div", { className: 'inputs-by-element' },
                        React.createElement("h5", null, "Population Dilution Space Ratio"),
                        React.createElement(NumberInput_1.NumberInput, { placeholder: "Dilution space ratio", value: this.state.dilution_space_ratio, change_function: this.handle_dilution_space_ratio_change, unit: '', index: 0 })),
                    React.createElement(core_1.Button, { className: 'calculate-button', onClick: this.submit_inputs, intent: core_1.Intent.SUCCESS, disabled: !all_inputs_validated }, "CALCULATE RESULTS")),
                React.createElement("div", { className: 'submit-group' },
                    React.createElement("div", { className: 'csv-input-new' },
                        React.createElement("h5", null, "Input a name for a new .csv file"),
                        React.createElement(core_1.InputGroup, { placeholder: 'CSV filename', className: 'csv_input', onChange: function (event) {
                                return _this.setState({
                                    new_csv_name: event.target.value,
                                    append_csv_name: ""
                                });
                            } })),
                    React.createElement("div", { className: 'csv-append' },
                        React.createElement("h5", null, "Or, select an existing .csv file to append results to"),
                        React.createElement(core_1.FileInput, { text: this.state.append_csv_name || "Choose file...", onInputChange: this.handle_csv_append_choice, className: 'csv-input' })),
                    React.createElement(core_1.Button, { onClick: this.export, disabled: !(this.state.results.results && (this.state.new_csv_name || this.state.append_csv_name)), className: 'export-button', intent: core_1.Intent.SUCCESS }, "EXPORT TO CSV")),
                results_display)));
    };
    return DLWApp;
}(React.Component));
exports.DLWApp = DLWApp;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LHdCQUF3QixFQUFFLFNBQVMsRUFBQyxXQUFXLEdBQUUsQ0FDOUU7b0JBQ04sb0JBQUMsYUFBTSxJQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQyxFQUN4SCxTQUFTLEVBQUMsZUFBZSxFQUFDLE1BQU0sRUFBRSxhQUFNLENBQUMsT0FBTyxvQkFBd0IsQ0FDOUU7Z0JBQ0wsZUFBZSxDQUNSLENBQ1AsQ0FDWixDQUNJO0lBQ1QsQ0FBQztJQXNhTCxhQUFDO0FBQUQsQ0FuMEJBLEFBbTBCQyxDQW4wQjJCLEtBQUssQ0FBQyxTQUFTLEdBbTBCMUM7QUFuMEJZLHdCQUFNIiwiZmlsZSI6IkRMV0FwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtcbiAgICBCdXR0b25Hcm91cCwgUG9wb3ZlcixcbiAgICBGb3JtR3JvdXAsXG4gICAgTnVtZXJpY0lucHV0LFxuICAgIEJ1dHRvbiwgVG9hc3RlciwgUG9zaXRpb24sXG4gICAgSW5wdXRHcm91cCwgQWxpZ25tZW50LCBUYWcsIEZpbGVJbnB1dCwgRGlhbG9nLCBDaGVja2JveCwgUmFkaW8sIFJhZGlvR3JvdXAsIEludGVudFxufSBmcm9tIFwiQGJsdWVwcmludGpzL2NvcmVcIjtcbmltcG9ydCAqIGFzIERhdGVUaW1lUGlja2VyIGZyb20gJ3JlYWN0LWRhdGV0aW1lJztcbmltcG9ydCAqIGFzIG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHtjYWxjdWxhdGVfZnJvbV9pbnB1dHMsIGV4cG9ydF90b19jc3YsIGxvYWRfZnJvbV9jc3YsIExvYWRlZENTVlJlc3VsdHN9IGZyb20gXCIuL1JlcXVlc3RzXCI7XG5pbXBvcnQge0Zvcm1FdmVudCwgUmVmT2JqZWN0fSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7Q2FyZCwgSWNvbiwgTmF2YmFyLCBOYXZiYXJEaXZpZGVyLCBOYXZiYXJHcm91cCwgTmF2YmFySGVhZGluZ30gZnJvbSBcIkBibHVlcHJpbnRqcy9jb3JlL2xpYi9janNcIjtcbmltcG9ydCB7TnVtYmVySW5wdXR9IGZyb20gXCIuL051bWJlcklucHV0XCI7XG5pbXBvcnQgY29udmVydF9zdHJpbmdfdG9fbW9tZW50IGZyb20gXCIuL3V0aWxpdGllc1wiO1xuaW1wb3J0IHtEZWx0YVNjYXR0ZXJDaGFydH0gZnJvbSBcIi4vRGVsdGFTY2F0dGVyQ2hhcnRcIjtcblxuY29uc3QgREVVVEVSSVVNID0gXCJEZXV0ZXJpdW1cIjtcbmNvbnN0IE9YWUdFTiA9IFwiT3h5Z2VuIDE4XCI7XG5jb25zdCBFTEVNRU5UUyA9IFtERVVURVJJVU0sIE9YWUdFTl07XG5cbmNvbnN0IE5VTV9TQU1QTEVfVElNRVMgPSA2O1xuY29uc3QgTlVNX0RFTFRBUyA9IDU7XG5leHBvcnQgY29uc3QgREFURV9MQUJFTFMgPSBbJ0JhY2tncm91bmQnLCAnRG9zZScsICdQREEnLCAnUERCJywgJ0VEQScsICdFREInXTtcbmV4cG9ydCBjb25zdCBTQU1QTEVfTEFCRUxTID0gW0RBVEVfTEFCRUxTWzBdXS5jb25jYXQoREFURV9MQUJFTFMuc2xpY2UoMiwgNikpO1xuXG5pbnRlcmZhY2UgUkNPMl9SRVNVTFRTIHtcbiAgICByY28yX21vbF9kYXk6IHN0cmluZ1tdLFxuICAgIHJjbzJfbF9ocjogc3RyaW5nW10sXG4gICAgZWVfa2NhbF9kYXk6IHN0cmluZ1tdLFxuICAgIGVlX21qX2RheTogc3RyaW5nW11cbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZXN1bHRzIHtcbiAgICByZXN1bHRzOiB7XG4gICAgICAgIGNhbGN1bGF0aW9uczoge1xuICAgICAgICAgICAgbmRwX2tnOiBzdHJpbmdbXSxcbiAgICAgICAgICAgIGtkX2hyOiBzdHJpbmdbXSxcbiAgICAgICAgICAgIG5vcF9rZzogc3RyaW5nW10sXG4gICAgICAgICAgICBrb19ocjogc3RyaW5nW10sXG4gICAgICAgICAgICBib2R5X3dhdGVyX2F2Z19rZzogc3RyaW5nW10sXG4gICAgICAgICAgICBmYXRfZnJlZV9tYXNzX2tnOiBzdHJpbmdbXSxcbiAgICAgICAgICAgIGZhdF9tYXNzX2tnOiBzdHJpbmdbXSxcbiAgICAgICAgICAgIGJvZHlfZmF0X3BlcmNlbnRhZ2U6IHN0cmluZ1tdXG4gICAgICAgIH1cbiAgICAgICAgc2Nob2VsbGVyOiB7XG4gICAgICAgICAgICByY28yX2VlX2ludDogUkNPMl9SRVNVTFRTLCByY28yX2VlX3BsYXQ6IFJDTzJfUkVTVUxUU1xuICAgICAgICB9XG4gICAgICAgIHJhY2V0dGU6IHtcbiAgICAgICAgICAgIHJjbzJfZWVfaW50OiBSQ08yX1JFU1VMVFMsIHJjbzJfZWVfcGxhdDogUkNPMl9SRVNVTFRTXG4gICAgICAgIH1cblxuICAgICAgICBzcGVha21hbjoge1xuICAgICAgICAgICAgcmNvMl9lZV9pbnQ6IFJDTzJfUkVTVUxUUywgcmNvMl9lZV9wbGF0OiBSQ08yX1JFU1VMVFNcbiAgICAgICAgfVxuICAgICAgICBlcnJvcl9mbGFnczoge1xuICAgICAgICAgICAgcGxhdGVhdV8yaDogc3RyaW5nW10sXG4gICAgICAgICAgICBwbGF0ZWF1XzE4MDogc3RyaW5nW10sXG4gICAgICAgICAgICBkc19yYXRpbzogc3RyaW5nW10sXG4gICAgICAgICAgICBlZTogc3RyaW5nW10sXG4gICAgICAgICAgICBrb19rZDogc3RyaW5nW11cbiAgICAgICAgfVxuICAgIH0gfCBudWxsXG59XG5cbmVudW0gRGVsdGFVbml0cyB7XG4gICAgcGVybWlsID0gXCJwZXJtaWxcIixcbiAgICBwcG0gPSBcInBwbVwiXG59XG5cbmludGVyZmFjZSBETFdTdGF0ZSB7XG4gICAgaW5wdXRfY3N2X25hbWU6IHN0cmluZztcbiAgICBpbmZvX292ZXJsYXlfb3BlbjogYm9vbGVhbjtcbiAgICBjbGVhcl9wb3B1cF9vcGVuOiBib29sZWFuO1xuXG4gICAgZGVsdGFfdW5pdHM6IERlbHRhVW5pdHM7XG4gICAgZGV1dGVyaXVtX2RlbHRhczogc3RyaW5nW10sXG4gICAgb3h5Z2VuX2RlbHRhczogc3RyaW5nW10sXG4gICAgZGF0ZXRpbWVzOiBtb21lbnQuTW9tZW50W10sXG4gICAgZG9zZV93ZWlnaHRzOiBzdHJpbmdbXSxcbiAgICBkb3NlX2VucmljaG1lbnRzOiBzdHJpbmdbXSxcbiAgICBzdWJqZWN0X3dlaWdodHM6IHN0cmluZ1tdLFxuICAgIGRpbHV0aW9uX3NwYWNlX3JhdGlvOiBzdHJpbmdcbiAgICBzdWJqZWN0X2lkOiBzdHJpbmc7XG4gICAgbWl4ZWRfZG9zZTogYm9vbGVhbjtcblxuICAgIGRldXRlcml1bV9kZWx0YXNfdmFsaWRhdGVkOiBib29sZWFuLFxuICAgIG94eWdlbl9kZWx0YXNfdmFsaWRhdGVkOiBib29sZWFuLFxuICAgIGRhdGV0aW1lc192YWxpZGF0ZWQ6IGJvb2xlYW4sXG4gICAgZG9zZV93ZWlnaHRzX3ZhbGlkYXRlZDogYm9vbGVhbixcbiAgICBkb3NlX2VucmljaG1lbnRzX3ZhbGlkYXRlZDogYm9vbGVhbixcbiAgICBzdWJqZWN0X3dlaWdodHNfdmFsaWRhdGVkOiBib29sZWFuLFxuXG4gICAgcmVzdWx0czogUmVzdWx0c1xuICAgIG5ld19jc3ZfbmFtZTogc3RyaW5nLFxuICAgIGFwcGVuZF9jc3ZfbmFtZTogc3RyaW5nXG59XG5cbmNvbnN0IEFwcFRvYXN0ZXIgPSBUb2FzdGVyLmNyZWF0ZSh7Y2xhc3NOYW1lOiBcImFwcC10b2FzdGVyXCIsIHBvc2l0aW9uOiBQb3NpdGlvbi5UT1BfUklHSFR9KTtcblxuZXhwb3J0IGNsYXNzIERMV0FwcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxhbnksIERMV1N0YXRlPiB7XG4gICAgbm93OiBtb21lbnQuTW9tZW50O1xuICAgIHNjcm9sbF9hbmNob3JfcmVmOiBSZWZPYmplY3Q8SFRNTERpdkVsZW1lbnQ+O1xuXG4gICAgY29uc3RydWN0b3IocHJvcHM6IGFueSkge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMubm93ID0gbW9tZW50KCk7XG4gICAgICAgIHRoaXMuc2Nyb2xsX2FuY2hvcl9yZWYgPSBSZWFjdC5jcmVhdGVSZWYoKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGlucHV0X2Nzdl9uYW1lOiBcIlwiLFxuICAgICAgICAgICAgaW5mb19vdmVybGF5X29wZW46IGZhbHNlLFxuICAgICAgICAgICAgY2xlYXJfcG9wdXBfb3BlbjogZmFsc2UsXG5cbiAgICAgICAgICAgIGRlbHRhX3VuaXRzOiBEZWx0YVVuaXRzLnBlcm1pbCxcbiAgICAgICAgICAgIGRldXRlcml1bV9kZWx0YXM6IFtcIlwiLCBcIlwiLCBcIlwiLCBcIlwiLCBcIlwiXSxcbiAgICAgICAgICAgIG94eWdlbl9kZWx0YXM6IFtcIlwiLCBcIlwiLCBcIlwiLCBcIlwiLCBcIlwiXSxcbiAgICAgICAgICAgIGRhdGV0aW1lczogW3RoaXMubm93LCB0aGlzLm5vdywgdGhpcy5ub3csIHRoaXMubm93LCB0aGlzLm5vdywgdGhpcy5ub3ddLFxuICAgICAgICAgICAgZG9zZV93ZWlnaHRzOiBbXCJcIiwgXCJcIl0sXG4gICAgICAgICAgICBkb3NlX2VucmljaG1lbnRzOiBbXCJcIiwgXCJcIl0sXG4gICAgICAgICAgICBtaXhlZF9kb3NlOiBmYWxzZSxcbiAgICAgICAgICAgIHN1YmplY3Rfd2VpZ2h0czogW1wiXCIsIFwiXCJdLFxuICAgICAgICAgICAgZGlsdXRpb25fc3BhY2VfcmF0aW86IFwiXCIsXG4gICAgICAgICAgICBzdWJqZWN0X2lkOiBcIlwiLFxuXG4gICAgICAgICAgICBkZXV0ZXJpdW1fZGVsdGFzX3ZhbGlkYXRlZDogZmFsc2UsXG4gICAgICAgICAgICBveHlnZW5fZGVsdGFzX3ZhbGlkYXRlZDogZmFsc2UsXG4gICAgICAgICAgICBkYXRldGltZXNfdmFsaWRhdGVkOiBmYWxzZSxcbiAgICAgICAgICAgIGRvc2Vfd2VpZ2h0c192YWxpZGF0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgZG9zZV9lbnJpY2htZW50c192YWxpZGF0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgc3ViamVjdF93ZWlnaHRzX3ZhbGlkYXRlZDogZmFsc2UsXG5cbiAgICAgICAgICAgIHJlc3VsdHM6IHtyZXN1bHRzOiBudWxsfSxcbiAgICAgICAgICAgIG5ld19jc3ZfbmFtZTogXCJcIiwgYXBwZW5kX2Nzdl9uYW1lOiBcIlwiXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBsZXQgYWxsX2lucHV0c192YWxpZGF0ZWQgPVxuICAgICAgICAgICAgKHRoaXMuc3RhdGUuZGV1dGVyaXVtX2RlbHRhc192YWxpZGF0ZWQgJiYgdGhpcy5zdGF0ZS5veHlnZW5fZGVsdGFzX3ZhbGlkYXRlZFxuICAgICAgICAgICAgICAgICYmIHRoaXMuc3RhdGUuZGF0ZXRpbWVzX3ZhbGlkYXRlZCAmJiB0aGlzLnN0YXRlLmRvc2Vfd2VpZ2h0c192YWxpZGF0ZWRcbiAgICAgICAgICAgICAgICAmJiB0aGlzLnN0YXRlLmRvc2VfZW5yaWNobWVudHNfdmFsaWRhdGVkICYmIHRoaXMuc3RhdGUuc3ViamVjdF93ZWlnaHRzX3ZhbGlkYXRlZFxuICAgICAgICAgICAgICAgICYmIHRoaXMuc3RhdGUuc3ViamVjdF9pZCk7XG5cbiAgICAgICAgbGV0IGRldXRlcml1bV9kZWx0YV9pbnB1dHM6IEpTWC5FbGVtZW50W10gPSBbXTtcbiAgICAgICAgbGV0IG94eWdlbl9kZWx0YV9pbnB1dHM6IEpTWC5FbGVtZW50W10gPSBbXTtcbiAgICAgICAgbGV0IGNvbGxlY3Rpb25fdGltZV9pbnB1dHM6IEpTWC5FbGVtZW50W10gPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBOVU1fU0FNUExFX1RJTUVTOyBpKyspIHtcbiAgICAgICAgICAgIGNvbGxlY3Rpb25fdGltZV9pbnB1dHMucHVzaChcbiAgICAgICAgICAgICAgICA8RGF0ZVRpbWVQaWNrZXIgb25DaGFuZ2U9eyh2YWx1ZSkgPT4gdGhpcy5oYW5kbGVfZGF0ZV9jaGFuZ2UoaSwgdmFsdWUpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFByb3BzPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdkYXRlLWlucHV0LWJveCAuYnAzLWlucHV0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnICcgKyBEQVRFX0xBQkVMU1tpXSArICcgc2FtcGxlIGRhdGUgYW5kIHRpbWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICh0aGlzLnN0YXRlLmRhdGV0aW1lc1tpXSA9PT0gdGhpcy5ub3cpID8gXCJcIiA6IHRoaXMuc3RhdGUuZGF0ZXRpbWVzW2ldLmZvcm1hdCgnWVlZWS1NTS1ERCBISDptbScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17aX0gdmFsdWU9e3RoaXMuc3RhdGUuZGF0ZXRpbWVzW2ldfSBkYXRlRm9ybWF0PVwiWVlZWS1NTS1ERFwiIHRpbWVGb3JtYXQ9XCJISDptbVwiLz5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBOVU1fREVMVEFTOyBpKyspIHtcbiAgICAgICAgICAgIGRldXRlcml1bV9kZWx0YV9pbnB1dHMucHVzaChcbiAgICAgICAgICAgICAgICA8TnVtYmVySW5wdXQgcGxhY2Vob2xkZXI9e1NBTVBMRV9MQUJFTFNbaV0gKyBcIiBEZXV0ZXJpdW0gZGVsdGFcIn0gaW5kZXg9e2l9IGtleT17aX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlX2Z1bmN0aW9uPXt0aGlzLmhhbmRsZV9kZXV0ZXJpdW1fZGVsdGFfY2hhbmdlfSB1bml0PXt0aGlzLnN0YXRlLmRlbHRhX3VuaXRzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5kZXV0ZXJpdW1fZGVsdGFzW2ldfS8+KTtcbiAgICAgICAgICAgIG94eWdlbl9kZWx0YV9pbnB1dHMucHVzaChcbiAgICAgICAgICAgICAgICA8TnVtYmVySW5wdXQgcGxhY2Vob2xkZXI9e1NBTVBMRV9MQUJFTFNbaV0gKyAnIE94eWdlbiAxOCBkZWx0YSd9IGluZGV4PXtpfSBrZXk9e2l9IHVuaXQ9e3RoaXMuc3RhdGUuZGVsdGFfdW5pdHN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZV9mdW5jdGlvbj17dGhpcy5oYW5kbGVfb3h5Z2VuX2RlbHRhX2NoYW5nZX0gdmFsdWU9e3RoaXMuc3RhdGUub3h5Z2VuX2RlbHRhc1tpXX0vPik7XG4gICAgICAgIH1cbiAgICAgICAgZGV1dGVyaXVtX2RlbHRhX2lucHV0cy5zcGxpY2UoMSwgMCwgPGRpdiBjbGFzc05hbWU9J2RlbHRhLXNwYWNlJy8+KTtcbiAgICAgICAgb3h5Z2VuX2RlbHRhX2lucHV0cy5zcGxpY2UoMSwgMCwgPGRpdiBjbGFzc05hbWU9J2RlbHRhLXNwYWNlJy8+KTtcblxuICAgICAgICBsZXQgZG9zZV93ZWlnaHRfaW5wdXRzOiBKU1guRWxlbWVudFtdID0gW107XG4gICAgICAgIGxldCBkb3NlX2VucmljaG1lbnRfaW5wdXRzOiBKU1guRWxlbWVudFtdID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgRUxFTUVOVFMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5zdGF0ZS5taXhlZF9kb3NlKSB7XG4gICAgICAgICAgICAgICAgZG9zZV93ZWlnaHRfaW5wdXRzLnB1c2goXG4gICAgICAgICAgICAgICAgICAgIDxOdW1iZXJJbnB1dCBwbGFjZWhvbGRlcj17RUxFTUVOVFNbaV0gKyAnIGRvc2Ugd2VpZ2h0IChnKSd9IGluZGV4PXtpfSBrZXk9e2l9IHVuaXQ9e1wiZ1wifVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlX2Z1bmN0aW9uPXt0aGlzLmhhbmRsZV9kb3NlX3dlaWdodF9jaGFuZ2V9IHZhbHVlPXt0aGlzLnN0YXRlLmRvc2Vfd2VpZ2h0c1tpXX0vPik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkb3NlX2VucmljaG1lbnRfaW5wdXRzLnB1c2goXG4gICAgICAgICAgICAgICAgPE51bWJlcklucHV0IHBsYWNlaG9sZGVyPXtFTEVNRU5UU1tpXSArICcgZG9zZSBlbnJpY2htZW50IChwcG0pJ30gaW5kZXg9e2l9IGtleT17aX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlX2Z1bmN0aW9uPXt0aGlzLmhhbmRsZV9kb3NlX2VucmljaG1lbnRfY2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5kb3NlX2VucmljaG1lbnRzW2ldfSB1bml0PXtcInBwbVwifS8+KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5taXhlZF9kb3NlKSB7XG4gICAgICAgICAgICBkb3NlX3dlaWdodF9pbnB1dHMucHVzaChcbiAgICAgICAgICAgICAgICA8TnVtYmVySW5wdXQgcGxhY2Vob2xkZXI9e1wiRG9zZSB3ZWlnaHQgKGcpXCJ9IGluZGV4PXswfSB2YWx1ZT17dGhpcy5zdGF0ZS5kb3NlX3dlaWdodHNbMF19IHVuaXQ9e1wiZ1wifVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VfZnVuY3Rpb249e3RoaXMuaGFuZGxlX2Rvc2Vfd2VpZ2h0X2NoYW5nZX0vPik7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3VsdHNfZGlzcGxheTogSlNYLkVsZW1lbnQgPSA8ZGl2Lz47XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnJlc3VsdHMucmVzdWx0cykge1xuICAgICAgICAgICAgbGV0IHJlc3VsdHNfY2FsY3VsYXRpb25zOiBKU1guRWxlbWVudFtdID0gW107XG4gICAgICAgICAgICBsZXQgcmVzdWx0c19lcnJvcl9mbGFnczogSlNYLkVsZW1lbnRbXSA9IFtdO1xuXG4gICAgICAgICAgICBsZXQgcmVzdWx0c19zY2hvZWxsZXJfaW50OiBKU1guRWxlbWVudFtdID0gW107XG4gICAgICAgICAgICBsZXQgcmVzdWx0c19zY2hvZWxsZXJfcGxhdDogSlNYLkVsZW1lbnRbXSA9IFtdO1xuICAgICAgICAgICAgbGV0IHJlc3VsdHNfcmFjZXR0ZV9pbnQ6IEpTWC5FbGVtZW50W10gPSBbXTtcbiAgICAgICAgICAgIGxldCByZXN1bHRzX3JhY2V0dGVfcGxhdDogSlNYLkVsZW1lbnRbXSA9IFtdO1xuICAgICAgICAgICAgbGV0IHJlc3VsdHNfc3BlYWttYW5faW50OiBKU1guRWxlbWVudFtdID0gW107XG4gICAgICAgICAgICBsZXQgcmVzdWx0c19zcGVha21hbl9wbGF0OiBKU1guRWxlbWVudFtdID0gW107XG5cbiAgICAgICAgICAgIHJlc3VsdHNfY2FsY3VsYXRpb25zLnB1c2goXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Jlc3VsdC1wYWlyJz5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwicmVzdWx0LWxhYmVsXCI+e3RoaXMuc3RhdGUucmVzdWx0cy5yZXN1bHRzLmNhbGN1bGF0aW9ucy5uZHBfa2dbMF0gKyBcIjpcIn08L3A+XG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInJlc3VsdC12YWx1ZVwiPnt0aGlzLnN0YXRlLnJlc3VsdHMucmVzdWx0cy5jYWxjdWxhdGlvbnMubmRwX2tnWzFdICsgXCIga2dcIn08L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+KTtcbiAgICAgICAgICAgIHJlc3VsdHNfY2FsY3VsYXRpb25zLnB1c2goXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Jlc3VsdC1wYWlyJz5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwicmVzdWx0LWxhYmVsXCI+e3RoaXMuc3RhdGUucmVzdWx0cy5yZXN1bHRzLmNhbGN1bGF0aW9ucy5rZF9oclswXSArIFwiOlwifTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwicmVzdWx0LXZhbHVlXCI+e3RoaXMuc3RhdGUucmVzdWx0cy5yZXN1bHRzLmNhbGN1bGF0aW9ucy5rZF9oclsxXX08L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+KTtcbiAgICAgICAgICAgIHJlc3VsdHNfY2FsY3VsYXRpb25zLnB1c2goXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Jlc3VsdC1wYWlyJz5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwicmVzdWx0LWxhYmVsXCI+e3RoaXMuc3RhdGUucmVzdWx0cy5yZXN1bHRzLmNhbGN1bGF0aW9ucy5ub3Bfa2dbMF0gKyBcIjpcIn08L3A+XG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInJlc3VsdC12YWx1ZVwiPnt0aGlzLnN0YXRlLnJlc3VsdHMucmVzdWx0cy5jYWxjdWxhdGlvbnMubm9wX2tnWzFdICsgXCIga2dcIn08L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+KTtcbiAgICAgICAgICAgIHJlc3VsdHNfY2FsY3VsYXRpb25zLnB1c2goXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Jlc3VsdC1wYWlyJz5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwicmVzdWx0LWxhYmVsXCI+e3RoaXMuc3RhdGUucmVzdWx0cy5yZXN1bHRzLmNhbGN1bGF0aW9ucy5rb19oclswXSArIFwiOlwifTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwicmVzdWx0LXZhbHVlXCI+e3RoaXMuc3RhdGUucmVzdWx0cy5yZXN1bHRzLmNhbGN1bGF0aW9ucy5rb19oclsxXX08L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+KTtcbiAgICAgICAgICAgIHJlc3VsdHNfY2FsY3VsYXRpb25zLnB1c2goXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Jlc3VsdC1wYWlyJz5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwicmVzdWx0LWxhYmVsXCI+e3RoaXMuc3RhdGUucmVzdWx0cy5yZXN1bHRzLmNhbGN1bGF0aW9ucy5ib2R5X3dhdGVyX2F2Z19rZ1swXSArIFwiOlwifTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwicmVzdWx0LXZhbHVlXCI+e3RoaXMuc3RhdGUucmVzdWx0cy5yZXN1bHRzLmNhbGN1bGF0aW9ucy5ib2R5X3dhdGVyX2F2Z19rZ1sxXSArIFwiIGtnXCJ9PC9wPlxuICAgICAgICAgICAgICAgIDwvZGl2Pik7XG4gICAgICAgICAgICByZXN1bHRzX2NhbGN1bGF0aW9ucy5wdXNoKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdyZXN1bHQtcGFpcic+XG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInJlc3VsdC1sYWJlbFwiPnt0aGlzLnN0YXRlLnJlc3VsdHMucmVzdWx0cy5jYWxjdWxhdGlvbnMuZmF0X2ZyZWVfbWFzc19rZ1swXSArIFwiOlwifTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwicmVzdWx0LXZhbHVlXCI+e3RoaXMuc3RhdGUucmVzdWx0cy5yZXN1bHRzLmNhbGN1bGF0aW9ucy5mYXRfZnJlZV9tYXNzX2tnWzFdICsgXCIga2dcIn08L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+KTtcbiAgICAgICAgICAgIHJlc3VsdHNfY2FsY3VsYXRpb25zLnB1c2goXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Jlc3VsdC1wYWlyJz5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwicmVzdWx0LWxhYmVsXCI+e3RoaXMuc3RhdGUucmVzdWx0cy5yZXN1bHRzLmNhbGN1bGF0aW9ucy5mYXRfbWFzc19rZ1swXSArIFwiOlwifTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwicmVzdWx0LXZhbHVlXCI+e3RoaXMuc3RhdGUucmVzdWx0cy5yZXN1bHRzLmNhbGN1bGF0aW9ucy5mYXRfbWFzc19rZ1sxXSArIFwiIGtnXCJ9PC9wPlxuICAgICAgICAgICAgICAgIDwvZGl2Pik7XG4gICAgICAgICAgICByZXN1bHRzX2NhbGN1bGF0aW9ucy5wdXNoKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdyZXN1bHQtcGFpcic+XG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInJlc3VsdC1sYWJlbFwiPnt0aGlzLnN0YXRlLnJlc3VsdHMucmVzdWx0cy5jYWxjdWxhdGlvbnMuYm9keV9mYXRfcGVyY2VudGFnZVswXSArIFwiOlwifTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwicmVzdWx0LXZhbHVlXCI+e3RoaXMuc3RhdGUucmVzdWx0cy5yZXN1bHRzLmNhbGN1bGF0aW9ucy5ib2R5X2ZhdF9wZXJjZW50YWdlWzFdICsgXCIlXCJ9PC9wPlxuICAgICAgICAgICAgICAgIDwvZGl2Pik7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHB1c2hfY2FsY3VsYXRlZF9yZXN1bHRzKGVsZW1lbnQ6IEpTWC5FbGVtZW50W10sIHJlc3VsdF9zZXQ6IFJDTzJfUkVTVUxUUykge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQucHVzaChcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Jlc3VsdC1wYWlyJz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInJlc3VsdC1sYWJlbFwiPntyZXN1bHRfc2V0LnJjbzJfbW9sX2RheVswXSArIFwiOlwifTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInJlc3VsdC12YWx1ZVwiPntyZXN1bHRfc2V0LnJjbzJfbW9sX2RheVsxXSArIFwiIG1vbC9kYXlcIn08L3A+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2Pik7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5wdXNoKFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncmVzdWx0LXBhaXInPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwicmVzdWx0LWxhYmVsXCI+e3Jlc3VsdF9zZXQucmNvMl9sX2hyWzBdICsgXCI6XCJ9PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwicmVzdWx0LXZhbHVlXCI+e3Jlc3VsdF9zZXQucmNvMl9sX2hyWzFdICsgXCIgTC9kYXlcIn08L3A+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2Pik7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5wdXNoKFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncmVzdWx0LXBhaXInPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwicmVzdWx0LWxhYmVsXCI+e3Jlc3VsdF9zZXQuZWVfa2NhbF9kYXlbMF0gKyBcIjpcIn08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJyZXN1bHQtdmFsdWVcIj57cmVzdWx0X3NldC5lZV9rY2FsX2RheVsxXSArIFwiIGtjYWwvZGF5XCJ9PC9wPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj4pO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQucHVzaChcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Jlc3VsdC1wYWlyJz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInJlc3VsdC1sYWJlbFwiPntyZXN1bHRfc2V0LmVlX21qX2RheVswXSArIFwiOlwifTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInJlc3VsdC12YWx1ZVwiPntyZXN1bHRfc2V0LmVlX21qX2RheVsxXSArIFwiIE1KL2RheVwifTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcHVzaF9jYWxjdWxhdGVkX3Jlc3VsdHMocmVzdWx0c19zY2hvZWxsZXJfaW50LCB0aGlzLnN0YXRlLnJlc3VsdHMucmVzdWx0cy5zY2hvZWxsZXIucmNvMl9lZV9pbnQpO1xuICAgICAgICAgICAgcHVzaF9jYWxjdWxhdGVkX3Jlc3VsdHMocmVzdWx0c19zY2hvZWxsZXJfcGxhdCwgdGhpcy5zdGF0ZS5yZXN1bHRzLnJlc3VsdHMuc2Nob2VsbGVyLnJjbzJfZWVfcGxhdCk7XG4gICAgICAgICAgICBwdXNoX2NhbGN1bGF0ZWRfcmVzdWx0cyhyZXN1bHRzX3JhY2V0dGVfaW50LCB0aGlzLnN0YXRlLnJlc3VsdHMucmVzdWx0cy5yYWNldHRlLnJjbzJfZWVfaW50KTtcbiAgICAgICAgICAgIHB1c2hfY2FsY3VsYXRlZF9yZXN1bHRzKHJlc3VsdHNfcmFjZXR0ZV9wbGF0LCB0aGlzLnN0YXRlLnJlc3VsdHMucmVzdWx0cy5yYWNldHRlLnJjbzJfZWVfcGxhdCk7XG4gICAgICAgICAgICBwdXNoX2NhbGN1bGF0ZWRfcmVzdWx0cyhyZXN1bHRzX3NwZWFrbWFuX2ludCwgdGhpcy5zdGF0ZS5yZXN1bHRzLnJlc3VsdHMuc3BlYWttYW4ucmNvMl9lZV9pbnQpO1xuICAgICAgICAgICAgcHVzaF9jYWxjdWxhdGVkX3Jlc3VsdHMocmVzdWx0c19zcGVha21hbl9wbGF0LCB0aGlzLnN0YXRlLnJlc3VsdHMucmVzdWx0cy5zcGVha21hbi5yY28yX2VlX3BsYXQpO1xuXG5cbiAgICAgICAgICAgIGxldCBlcnJvcl9va2F5ID0gXCJlcnJvci1va2F5XCI7XG4gICAgICAgICAgICBsZXQgb3V0c2lkZV9lcnJvcl9iYXJzID0gXCJlcnJvci1ub3Qtb2theVwiO1xuICAgICAgICAgICAgbGV0IGVycm9yX2NsYXNzID0gKChwYXJzZUZsb2F0KHRoaXMuc3RhdGUucmVzdWx0cy5yZXN1bHRzLmVycm9yX2ZsYWdzLnBsYXRlYXVfMmhbMV0pIDwgMC4wNSkgPyBlcnJvcl9va2F5IDogb3V0c2lkZV9lcnJvcl9iYXJzKTtcbiAgICAgICAgICAgIHJlc3VsdHNfZXJyb3JfZmxhZ3MucHVzaChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncmVzdWx0LXBhaXInPlxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJyZXN1bHQtbGFiZWxcIj57dGhpcy5zdGF0ZS5yZXN1bHRzLnJlc3VsdHMuZXJyb3JfZmxhZ3MucGxhdGVhdV8yaFswXSArIFwiOlwifTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPXtcInJlc3VsdC12YWx1ZSBcIiArIGVycm9yX2NsYXNzfT57dGhpcy5zdGF0ZS5yZXN1bHRzLnJlc3VsdHMuZXJyb3JfZmxhZ3MucGxhdGVhdV8yaFsxXSArICclJ308L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+KTtcbiAgICAgICAgICAgIGVycm9yX2NsYXNzID0gKChwYXJzZUZsb2F0KHRoaXMuc3RhdGUucmVzdWx0cy5yZXN1bHRzLmVycm9yX2ZsYWdzLnBsYXRlYXVfMTgwWzFdKSA8IDAuMDUpID8gZXJyb3Jfb2theSA6IG91dHNpZGVfZXJyb3JfYmFycyk7XG4gICAgICAgICAgICByZXN1bHRzX2Vycm9yX2ZsYWdzLnB1c2goXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Jlc3VsdC1wYWlyJz5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwicmVzdWx0LWxhYmVsXCI+e3RoaXMuc3RhdGUucmVzdWx0cy5yZXN1bHRzLmVycm9yX2ZsYWdzLnBsYXRlYXVfMTgwWzBdICsgXCI6XCJ9PC9wPlxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9e1wicmVzdWx0LXZhbHVlIFwiICsgZXJyb3JfY2xhc3N9Pnt0aGlzLnN0YXRlLnJlc3VsdHMucmVzdWx0cy5lcnJvcl9mbGFncy5wbGF0ZWF1XzE4MFsxXSArICclJ308L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+KTtcbiAgICAgICAgICAgIGVycm9yX2NsYXNzID0gKChwYXJzZUZsb2F0KHRoaXMuc3RhdGUucmVzdWx0cy5yZXN1bHRzLmVycm9yX2ZsYWdzLmRzX3JhdGlvWzFdKSA8IDEuMDcwICYmXG4gICAgICAgICAgICAgICAgcGFyc2VGbG9hdCh0aGlzLnN0YXRlLnJlc3VsdHMucmVzdWx0cy5lcnJvcl9mbGFncy5kc19yYXRpb1sxXSkgPiAxKSA/IGVycm9yX29rYXkgOiBvdXRzaWRlX2Vycm9yX2JhcnMpO1xuICAgICAgICAgICAgcmVzdWx0c19lcnJvcl9mbGFncy5wdXNoKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdyZXN1bHQtcGFpcic+XG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInJlc3VsdC1sYWJlbFwiPnt0aGlzLnN0YXRlLnJlc3VsdHMucmVzdWx0cy5lcnJvcl9mbGFncy5kc19yYXRpb1swXSArIFwiOlwifTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPXtcInJlc3VsdC12YWx1ZSBcIiArIGVycm9yX2NsYXNzfT57dGhpcy5zdGF0ZS5yZXN1bHRzLnJlc3VsdHMuZXJyb3JfZmxhZ3MuZHNfcmF0aW9bMV19PC9wPlxuICAgICAgICAgICAgICAgIDwvZGl2Pik7XG4gICAgICAgICAgICBlcnJvcl9jbGFzcyA9ICgocGFyc2VGbG9hdCh0aGlzLnN0YXRlLnJlc3VsdHMucmVzdWx0cy5lcnJvcl9mbGFncy5lZVsxXSkgPCAxMCkgPyBlcnJvcl9va2F5IDogb3V0c2lkZV9lcnJvcl9iYXJzKTtcbiAgICAgICAgICAgIHJlc3VsdHNfZXJyb3JfZmxhZ3MucHVzaChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncmVzdWx0LXBhaXInPlxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJyZXN1bHQtbGFiZWxcIj57dGhpcy5zdGF0ZS5yZXN1bHRzLnJlc3VsdHMuZXJyb3JfZmxhZ3MuZWVbMF0gKyBcIjpcIn08L3A+XG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT17XCJyZXN1bHQtdmFsdWUgXCIgKyBlcnJvcl9jbGFzc30+e3RoaXMuc3RhdGUucmVzdWx0cy5yZXN1bHRzLmVycm9yX2ZsYWdzLmVlWzFdICsgXCIlXCJ9PC9wPlxuICAgICAgICAgICAgICAgIDwvZGl2Pik7XG4gICAgICAgICAgICBlcnJvcl9jbGFzcyA9ICgocGFyc2VGbG9hdCh0aGlzLnN0YXRlLnJlc3VsdHMucmVzdWx0cy5lcnJvcl9mbGFncy5rb19rZFsxXSkgPCAxLjcgJiZcbiAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KHRoaXMuc3RhdGUucmVzdWx0cy5yZXN1bHRzLmVycm9yX2ZsYWdzLmtvX2tkWzFdKSA+IDEuMSkgPyBlcnJvcl9va2F5IDogb3V0c2lkZV9lcnJvcl9iYXJzKTtcbiAgICAgICAgICAgIHJlc3VsdHNfZXJyb3JfZmxhZ3MucHVzaChcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncmVzdWx0LXBhaXInPlxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJyZXN1bHQtbGFiZWxcIj57dGhpcy5zdGF0ZS5yZXN1bHRzLnJlc3VsdHMuZXJyb3JfZmxhZ3Mua29fa2RbMF0gKyBcIjpcIn08L3A+XG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT17XCJyZXN1bHQtdmFsdWUgXCIgKyBlcnJvcl9jbGFzc30+e3RoaXMuc3RhdGUucmVzdWx0cy5yZXN1bHRzLmVycm9yX2ZsYWdzLmtvX2tkWzFdfTwvcD5cbiAgICAgICAgICAgICAgICA8L2Rpdj4pO1xuICAgICAgICAgICAgbGV0IGNoYXJ0X2RhdGFfZF9tZWFzID0gW107XG4gICAgICAgICAgICBsZXQgY2hhcnRfZGF0YV9vMThfbWVhcyA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnN0YXRlLmRldXRlcml1bV9kZWx0YXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjaGFydF9kYXRhX2RfbWVhcy5wdXNoKHt4OiBpLCB5OiB0aGlzLnN0YXRlLmRldXRlcml1bV9kZWx0YXNbaV19KTtcbiAgICAgICAgICAgICAgICBjaGFydF9kYXRhX28xOF9tZWFzLnB1c2goe3g6IGksIHk6IHRoaXMuc3RhdGUub3h5Z2VuX2RlbHRhc1tpXX0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGRlbHRhc19jaGFydDogSlNYLkVsZW1lbnQgPSAoXG4gICAgICAgICAgICAgICAgPERlbHRhU2NhdHRlckNoYXJ0IGRlbHRhX3VuaXRzPXt0aGlzLnN0YXRlLmRlbHRhX3VuaXRzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydF9kYXRhX2RfbWVhcz17Y2hhcnRfZGF0YV9kX21lYXN9IGNoYXJ0X2RhdGFfbzE4X21lYXM9e2NoYXJ0X2RhdGFfbzE4X21lYXN9Lz5cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXN1bHRzX2Rpc3BsYXkgPSAoXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Jlc3VsdHMtZGlzcGxheScgcmVmPXt0aGlzLnNjcm9sbF9hbmNob3JfcmVmfT5cbiAgICAgICAgICAgICAgICAgICAgPENhcmQgY2xhc3NOYW1lPSdyZXN1bHRzLWNhcmQnPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGgxPnsnUmVzdWx0cyBmb3Igc3ViamVjdCAnICsgdGhpcy5zdGF0ZS5zdWJqZWN0X2lkfTwvaDE+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncmVzdWx0LXNlY3Rpb25zJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncmVzdWx0LXNlY3Rpb24nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3NOYW1lPSdyZXN1bHQtaGVhZGVyLWNhbGMnPkNhbGN1bGF0aW9uczwvaDU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtyZXN1bHRzX2NhbGN1bGF0aW9uc31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncmVzdWx0LXNlY3Rpb24gZXJyb3ItZmxhZ3MnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3NOYW1lPSdyZXN1bHQtaGVhZGVyLWVycm9yJz5FcnJvciBGbGFnczwvaDU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtyZXN1bHRzX2Vycm9yX2ZsYWdzfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvQ2FyZD5cbiAgICAgICAgICAgICAgICAgICAgPENhcmQgY2xhc3NOYW1lPSdyZXN1bHRzLWNhcmQnPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Jlc3VsdC1zZWN0aW9ucyBjYWxjdWxhdGlvbi10eXBlcyc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Jlc3VsdC1zZWN0aW9uJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyPlNjaG9lbGxlcjwvaDI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzc05hbWU9J3Jlc3VsdC1oZWFkZXItY2FsYyc+ckNPMiBhbmQgRUUsIGludGVyY2VwdCBtZXRob2Q8L2g1PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7cmVzdWx0c19zY2hvZWxsZXJfaW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3NOYW1lPSdyZXN1bHQtaGVhZGVyLWNhbGMnPnJDTzIgYW5kIEVFLCBwbGF0ZWF1IG1ldGhvZDwvaDU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtyZXN1bHRzX3NjaG9lbGxlcl9wbGF0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdyZXN1bHQtc2VjdGlvbic+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMj5SYWNldHRlPC9oMj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1IGNsYXNzTmFtZT0ncmVzdWx0LWhlYWRlci1jYWxjJz5yQ08yIGFuZCBFRSwgaW50ZXJjZXB0IG1ldGhvZDwvaDU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtyZXN1bHRzX3JhY2V0dGVfaW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3NOYW1lPSdyZXN1bHQtaGVhZGVyLWNhbGMnPnJDTzIgYW5kIEVFLCBwbGF0ZWF1IG1ldGhvZDwvaDU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtyZXN1bHRzX3JhY2V0dGVfcGxhdH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncmVzdWx0LXNlY3Rpb24nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDI+U3BlYWttYW48L2gyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3NOYW1lPSdyZXN1bHQtaGVhZGVyLWNhbGMnPnJDTzIgYW5kIEVFLCBpbnRlcmNlcHQgbWV0aG9kPC9oNT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Jlc3VsdHNfc3BlYWttYW5faW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3NOYW1lPSdyZXN1bHQtaGVhZGVyLWNhbGMnPnJDTzIgYW5kIEVFLCBwbGF0ZWF1IG1ldGhvZDwvaDU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtyZXN1bHRzX3NwZWFrbWFuX3BsYXR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9DYXJkPlxuICAgICAgICAgICAgICAgICAgICA8Q2FyZCBjbGFzc05hbWU9J3Jlc3VsdHMtY2FyZCc+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncmVzdWx0LXNlY3Rpb25zJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncmVzdWx0LXNlY3Rpb24nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDUgY2xhc3NOYW1lPSdjaGFydC10aXRsZSc+RGV1dGVyaXVtLzE4TyBNZWFzdXJlZCBFbnJpY2htZW50czwvaDU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkZWx0YXNfY2hhcnR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9DYXJkPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxOYXZiYXIgY2xhc3NOYW1lPSdkbHctbmF2Jz5cbiAgICAgICAgICAgICAgICA8RGlhbG9nIGlzT3Blbj17dGhpcy5zdGF0ZS5pbmZvX292ZXJsYXlfb3Blbn0gY2FuRXNjYXBlS2V5Q2xvc2U9e3RydWV9IGNhbk91dHNpZGVDbGlja0Nsb3NlPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0JhY2tkcm9wPXt0cnVlfSBpc0Nsb3NlQnV0dG9uU2hvd249e3RydWV9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsb3NlPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7aW5mb19vdmVybGF5X29wZW46IGZhbHNlfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT17J0hvdyB0byB1c2UgdGhlIERvdWJseSBMYWJlbGVkIFdhdGVyIEFwcCd9PlxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9J2hlbHAtcGFyYWdyYXBoJz5NaXhlZCBEb3NlOiBJZiBjaGVja2VkLCBlbnRlciAxOE8gYW5kIDJIIGVucmljaG1lbnRzIG9mIHRoZSBkb3NlIGFzXG4gICAgICAgICAgICAgICAgICAgICAgICBtZWFzdXJlZCA8c3Ryb25nPmFmdGVyPC9zdHJvbmc+IG1peGluZy48L3A+XG4gICAgICAgICAgICAgICAgPC9EaWFsb2c+XG4gICAgICAgICAgICAgICAgPE5hdmJhckdyb3VwIGFsaWduPXtBbGlnbm1lbnQuTEVGVH0+XG4gICAgICAgICAgICAgICAgICAgIDxOYXZiYXIuSGVhZGluZyBjbGFzc05hbWU9J2Rsdy10aXRsZSc+RG91Ymx5IExhYmVsZWQgV2F0ZXI8L05hdmJhci5IZWFkaW5nPlxuICAgICAgICAgICAgICAgIDwvTmF2YmFyR3JvdXA+XG4gICAgICAgICAgICAgICAgPE5hdmJhckdyb3VwIGFsaWduPXtBbGlnbm1lbnQuUklHSFR9PlxuICAgICAgICAgICAgICAgICAgICA8TmF2YmFySGVhZGluZyBjbGFzc05hbWU9J3RhZ2xpbmUnPmFuIG9wZW4gc291cmNlIHByb2plY3Q8L05hdmJhckhlYWRpbmc+XG4gICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL2xvZ29fY3Vocy5wbmdcIiBhbHQ9XCJVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEFuc2NodXR6IE1lZGljYWwgQ2FtcHVzIGxvZ29cIlxuICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7J2hlaWdodCc6IDMwfX0vPlxuICAgICAgICAgICAgICAgICAgICA8TmF2YmFyRGl2aWRlci8+XG4gICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vamNobXl6L0RvdWJseUxhYmVsZWRXYXRlclwiIHRhcmdldD1cIl9ibGFua1wiPkRvdWJseUxhYmVsZWRXYXRlciBvblxuICAgICAgICAgICAgICAgICAgICAgICAgR2l0SHViPC9hPlxuICAgICAgICAgICAgICAgICAgICA8TmF2YmFyRGl2aWRlci8+XG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b24gaWNvbj17XCJoZWxwXCJ9IG1pbmltYWw9e3RydWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5zZXRTdGF0ZSh7aW5mb19vdmVybGF5X29wZW46IHRydWV9KX0+SGVscDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvTmF2YmFyR3JvdXA+XG4gICAgICAgICAgICAgICAgPEZvcm1Hcm91cCBjbGFzc05hbWU9J2Rsdy1hcHAnPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nc3ViamVjdC1jbGVhcic+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5TdWJqZWN0IElEPC9oNT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UG9wb3ZlciBpc09wZW49e3RoaXMuc3RhdGUuY2xlYXJfcG9wdXBfb3Blbn0gcG9zaXRpb249XCJyaWdodFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudD17XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjbGVhci1wb3BvdmVyJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT0naGVscC1wYXJhZ3JhcGgnPkVudGVyaW5nIGEgbmV3IHN1YmplY3QgSUQuIENsZWFyIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHM/PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3BvcG92ZXItYnV0dG9uLWNvbnRhaW5lcic+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBjbGFzc05hbWU9J3BvcG92ZXItYnV0dG9uJyBvbkNsaWNrPXt0aGlzLmNsZWFyfT5DTEVBUlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJTlBVVFM8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNsYXNzTmFtZT0ncG9wb3Zlci1idXR0b24nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLnNldFN0YXRlKHtjbGVhcl9wb3B1cF9vcGVuOiBmYWxzZX0pfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5LRUVQIElOUFVUUzwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pn0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dEdyb3VwIGxlZnRJY29uPXsodGhpcy5zdGF0ZS5zdWJqZWN0X2lkID8gXCJ0aWNrXCIgOiBcImNpcmNsZS1hcnJvdy1yaWdodFwiKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXsnLmJwMy1maWxsIHN1YmplY3QtaWQnfSBvbkNoYW5nZT17dGhpcy5oYW5kbGVfc3ViamVjdF9pZF9jaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSdJRCcgdmFsdWU9e3RoaXMuc3RhdGUuc3ViamVjdF9pZH0vPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvUG9wb3Zlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uIGNsYXNzTmFtZT0nY2xlYXItYnV0dG9uJyBvbkNsaWNrPXt0aGlzLmNsZWFyfT5DTEVBUiBJTlBVVFM8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2xvYWQtZnJvbS1jc3YnPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGg1PkxvYWQgaW5wdXQgZGF0YSBmcm9tIC5jc3YgZmlsZTwvaDU+XG4gICAgICAgICAgICAgICAgICAgICAgICA8RmlsZUlucHV0IHRleHQ9e3RoaXMuc3RhdGUuaW5wdXRfY3N2X25hbWUgfHwgXCJDaG9vc2UgZmlsZS4uLlwifVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFByb3BzPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYWNjZXB0JzogJy5jc3YnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lkJzogJ2ZpbGUtaW5wdXQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19IG9uSW5wdXRDaGFuZ2U9e3RoaXMuaGFuZGxlX2Nzdl91cGxvYWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXshISh0aGlzLnN0YXRlLmlucHV0X2Nzdl9uYW1lKX0vPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3NhbXBsZXMnPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2RhdGUtaW5wdXRzJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+Q29sbGVjdGlvbiBEYXRlcyBhbmQgVGltZXM8L2g1PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjb2xsZWN0aW9uX3RpbWVfaW5wdXRzfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZGVsdGEtaW5wdXRzJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+RGV1dGVyaXVtIERlbHRhIFZhbHVlczwvaDU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2RldXRlcml1bV9kZWx0YV9pbnB1dHN9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdkZWx0YS1pbnB1dHMnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5PeHlnZW4gMTggRGVsdGEgVmFsdWVzPC9oNT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7b3h5Z2VuX2RlbHRhX2lucHV0c31cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2RlbHRhLXVuaXQtcmFkaW8nPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxSYWRpb0dyb3VwIG9uQ2hhbmdlPXsoZXZlbnQ6IEZvcm1FdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtkZWx0YV91bml0czogKGV2ZW50LnRhcmdldCBhcyBhbnkpLnZhbHVlfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fSBzZWxlY3RlZFZhbHVlPXt0aGlzLnN0YXRlLmRlbHRhX3VuaXRzfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFJhZGlvIGxhYmVsPVwicGVybWlsXCIgdmFsdWU9e0RlbHRhVW5pdHMucGVybWlsfSBsYXJnZT17dHJ1ZX0vPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UmFkaW8gbGFiZWw9XCJwcG1cIiB2YWx1ZT17RGVsdGFVbml0cy5wcG19IGxhcmdlPXt0cnVlfS8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9SYWRpb0dyb3VwPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZWxlbWVudC13aXNlLWlucHV0cyc+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nbWl4ZWQtZG9zZSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J21peGVkLWRvc2UtYm94Jz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPENoZWNrYm94IGNoZWNrZWQ9e3RoaXMuc3RhdGUubWl4ZWRfZG9zZX0gbGFiZWxFbGVtZW50PXs8aDU+TWl4ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERvc2U8L2g1Pn0gbGFyZ2U9e3RydWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe21peGVkX2Rvc2U6ICF0aGlzLnN0YXRlLm1peGVkX2Rvc2V9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX0gYWxpZ25JbmRpY2F0b3I9e0FsaWdubWVudC5SSUdIVH0vPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gaWNvbj1cImhlbHBcIiBtaW5pbWFsPXt0cnVlfSBjbGFzc05hbWU9J21peGVkLWRvc2UtaGVscC1idXR0b24nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLnNldFN0YXRlKHtpbmZvX292ZXJsYXlfb3BlbjogdHJ1ZX0pfS8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdlbGVtZW50LXdpc2UtaW5wdXRzJz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdpbnB1dHMtYnktZWxlbWVudCc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PnsoKHRoaXMuc3RhdGUubWl4ZWRfZG9zZSkgPyAnRG9zZSBXZWlnaHQnIDogJ0Rvc2UgV2VpZ2h0cycpfTwvaDU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2Rvc2Vfd2VpZ2h0X2lucHV0c31cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2lucHV0cy1ieS1lbGVtZW50Jz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+eygodGhpcy5zdGF0ZS5taXhlZF9kb3NlKSA/ICdNaXhlZCBEb3NlIEVucmljaG1lbnRzJyA6ICdEb3NlIEVucmljaG1lbnRzJyl9PC9oNT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZG9zZV9lbnJpY2htZW50X2lucHV0c31cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2VsZW1lbnQtd2lzZS1pbnB1dHMnPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2lucHV0cy1ieS1lbGVtZW50Jz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+U3ViamVjdCBXZWlnaHQ8L2g1PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxOdW1iZXJJbnB1dCBwbGFjZWhvbGRlcj17XCJJbml0aWFsIHN1YmplY3Qgd2VpZ2h0IChrZylcIn0gaW5kZXg9ezB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZV9mdW5jdGlvbj17dGhpcy5oYW5kbGVfc3ViamVjdF93ZWlnaHRfY2hhbmdlfSB1bml0PXsna2cnfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5zdWJqZWN0X3dlaWdodHNbMF19Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TnVtYmVySW5wdXQgcGxhY2Vob2xkZXI9e1wiRmluYWwgc3ViamVjdCB3ZWlnaHQgKGtnKVwifSBpbmRleD17MX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlX2Z1bmN0aW9uPXt0aGlzLmhhbmRsZV9zdWJqZWN0X3dlaWdodF9jaGFuZ2V9IHVuaXQ9eydrZyd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnN1YmplY3Rfd2VpZ2h0c1sxXX0vPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0naW5wdXRzLWJ5LWVsZW1lbnQnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5Qb3B1bGF0aW9uIERpbHV0aW9uIFNwYWNlIFJhdGlvPC9oNT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TnVtYmVySW5wdXQgcGxhY2Vob2xkZXI9e1wiRGlsdXRpb24gc3BhY2UgcmF0aW9cIn0gdmFsdWU9e3RoaXMuc3RhdGUuZGlsdXRpb25fc3BhY2VfcmF0aW99XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZV9mdW5jdGlvbj17dGhpcy5oYW5kbGVfZGlsdXRpb25fc3BhY2VfcmF0aW9fY2hhbmdlfSB1bml0PXsnJ30gaW5kZXg9ezB9Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBjbGFzc05hbWU9J2NhbGN1bGF0ZS1idXR0b24nIG9uQ2xpY2s9e3RoaXMuc3VibWl0X2lucHV0c30gaW50ZW50PXtJbnRlbnQuU1VDQ0VTU31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9eyFhbGxfaW5wdXRzX3ZhbGlkYXRlZH0+Q0FMQ1VMQVRFIFJFU1VMVFM8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdzdWJtaXQtZ3JvdXAnPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2Nzdi1pbnB1dC1uZXcnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5JbnB1dCBhIG5hbWUgZm9yIGEgbmV3IC5jc3YgZmlsZTwvaDU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0R3JvdXAgcGxhY2Vob2xkZXI9J0NTViBmaWxlbmFtZScgY2xhc3NOYW1lPSdjc3ZfaW5wdXQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhldmVudDogRm9ybUV2ZW50PEhUTUxFbGVtZW50PikgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19jc3ZfbmFtZTogKGV2ZW50LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kX2Nzdl9uYW1lOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSl9Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2Nzdi1hcHBlbmQnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5Pciwgc2VsZWN0IGFuIGV4aXN0aW5nIC5jc3YgZmlsZSB0byBhcHBlbmQgcmVzdWx0cyB0bzwvaDU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEZpbGVJbnB1dCB0ZXh0PXt0aGlzLnN0YXRlLmFwcGVuZF9jc3ZfbmFtZSB8fCBcIkNob29zZSBmaWxlLi4uXCJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbklucHV0Q2hhbmdlPXt0aGlzLmhhbmRsZV9jc3ZfYXBwZW5kX2Nob2ljZX0gY2xhc3NOYW1lPSdjc3YtaW5wdXQnLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXt0aGlzLmV4cG9ydH0gZGlzYWJsZWQ9eyEodGhpcy5zdGF0ZS5yZXN1bHRzLnJlc3VsdHMgJiYgKHRoaXMuc3RhdGUubmV3X2Nzdl9uYW1lIHx8IHRoaXMuc3RhdGUuYXBwZW5kX2Nzdl9uYW1lKSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0nZXhwb3J0LWJ1dHRvbicgaW50ZW50PXtJbnRlbnQuU1VDQ0VTU30+RVhQT1JUIFRPIENTVjwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAge3Jlc3VsdHNfZGlzcGxheX1cbiAgICAgICAgICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgICAgICAgIDwvTmF2YmFyPlxuICAgICAgICApXG4gICAgICAgICAgICA7XG4gICAgfVxuXG4gICAgZXhwb3J0ID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBsZXQgcmVzdWx0cyA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLm5ld19jc3ZfbmFtZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXN1bHRzID0gYXdhaXQgZXhwb3J0X3RvX2Nzdih0aGlzLnN0YXRlLm5ld19jc3ZfbmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHRzID0gYXdhaXQgZXhwb3J0X3RvX2Nzdih0aGlzLnN0YXRlLmFwcGVuZF9jc3ZfbmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3VsdHMuZXJyb3IpIHtcbiAgICAgICAgICAgIEFwcFRvYXN0ZXIuc2hvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiRXJyb3IgZXhwb3J0aW5nIHJlc3VsdHMgdG8gY3N2LiBQbGVhc2UgZmlsZSBhIGJ1ZyByZXBvcnQgYXQgaHR0cHM6Ly9naXRodWIuY29tL2pjaG15ei9Eb3VibHlMYWJlbGVkV2F0ZXIvaXNzdWVzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVudDogXCJkYW5nZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dDogMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgQXBwVG9hc3Rlci5zaG93KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJSZXN1bHRzIHN1Y2Nlc3NmdWxseSBleHBvcnRlZCB0byBcIiArIHJlc3VsdHMuc2F2ZWRfZmlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZW50OiBcInN1Y2Nlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dDogMzAwMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHN1Ym1pdF9pbnB1dHMgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIGxldCBkYXRldGltZXMgPSB0aGlzLnN0YXRlLmRhdGV0aW1lcy5tYXAoKHZhbHVlOiBtb21lbnQuTW9tZW50KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUudG9BcnJheSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gbW9udGhzIGFyZSB6ZXJvLWluZGV4ZWQgaW4gTW9tZW50LmpzXG4gICAgICAgIGRhdGV0aW1lcy5tYXAoKHZhbHVlOiBudW1iZXJbXSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnNwbGljZSgxLCAxLCB2YWx1ZVsxXSArIDEpO1xuICAgICAgICB9KTtcbiAgICAgICAgbGV0IGNhbGN1bGF0ZWRfcmVzdWx0cyA9IGF3YWl0IGNhbGN1bGF0ZV9mcm9tX2lucHV0cyhcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBkX21lYXM6IHRoaXMuc3RhdGUuZGV1dGVyaXVtX2RlbHRhcyxcbiAgICAgICAgICAgICAgICBvMThfbWVhczogdGhpcy5zdGF0ZS5veHlnZW5fZGVsdGFzLFxuICAgICAgICAgICAgICAgIGRhdGV0aW1lczogZGF0ZXRpbWVzLFxuICAgICAgICAgICAgICAgIGRvc2Vfd2VpZ2h0czogdGhpcy5zdGF0ZS5kb3NlX3dlaWdodHMsXG4gICAgICAgICAgICAgICAgZG9zZV9lbnJpY2htZW50czogdGhpcy5zdGF0ZS5kb3NlX2VucmljaG1lbnRzLFxuICAgICAgICAgICAgICAgIHN1YmplY3Rfd2VpZ2h0czogdGhpcy5zdGF0ZS5zdWJqZWN0X3dlaWdodHMsXG4gICAgICAgICAgICAgICAgc3ViamVjdF9pZDogdGhpcy5zdGF0ZS5zdWJqZWN0X2lkLFxuICAgICAgICAgICAgICAgIG1peGVkX2Rvc2U6IHRoaXMuc3RhdGUubWl4ZWRfZG9zZSxcbiAgICAgICAgICAgICAgICBpbl9wZXJtaWw6ICh0aGlzLnN0YXRlLmRlbHRhX3VuaXRzID09PSBEZWx0YVVuaXRzLnBlcm1pbClcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGNhbGN1bGF0ZWRfcmVzdWx0cy5yZXN1bHRzKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGN1bGF0aW9uczogY2FsY3VsYXRlZF9yZXN1bHRzLnJlc3VsdHMuY2FsY3VsYXRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2hvZWxsZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJjbzJfZWVfaW50OiBjYWxjdWxhdGVkX3Jlc3VsdHMucmVzdWx0cy5zY2hvZWxsZXIucmNvMl9lZV9pbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByY28yX2VlX3BsYXQ6IGNhbGN1bGF0ZWRfcmVzdWx0cy5yZXN1bHRzLnNjaG9lbGxlci5yY28yX2VlX3BsYXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhY2V0dGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJjbzJfZWVfaW50OiBjYWxjdWxhdGVkX3Jlc3VsdHMucmVzdWx0cy5yYWNldHRlLnJjbzJfZWVfaW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmNvMl9lZV9wbGF0OiBjYWxjdWxhdGVkX3Jlc3VsdHMucmVzdWx0cy5yYWNldHRlLnJjbzJfZWVfcGxhdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGVha21hbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmNvMl9lZV9pbnQ6IGNhbGN1bGF0ZWRfcmVzdWx0cy5yZXN1bHRzLnNwZWFrbWFuLnJjbzJfZWVfaW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmNvMl9lZV9wbGF0OiBjYWxjdWxhdGVkX3Jlc3VsdHMucmVzdWx0cy5zcGVha21hbi5yY28yX2VlX3BsYXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JfZmxhZ3M6IGNhbGN1bGF0ZWRfcmVzdWx0cy5yZXN1bHRzLmVycm9yX2ZsYWdzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIEFwcFRvYXN0ZXIuc2hvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiUmVzdWx0cyBjYWxjdWxhdGVkIHN1Y2Nlc3NmdWxseVwiLCBpbnRlbnQ6IFwic3VjY2Vzc1wiLCB0aW1lb3V0OiAzMDAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAodGhpcy5zY3JvbGxfYW5jaG9yX3JlZi5jdXJyZW50KSB0aGlzLnNjcm9sbF9hbmNob3JfcmVmLmN1cnJlbnQuc2Nyb2xsSW50b1ZpZXcoe2JlaGF2aW9yOiBcInNtb290aFwifSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgY2xlYXIgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhcl9wb3B1cF9vcGVuOiBmYWxzZSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dF9jc3ZfbmFtZTogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGV1dGVyaXVtX2RlbHRhczogW1wiXCIsIFwiXCIsIFwiXCIsIFwiXCIsIFwiXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBveHlnZW5fZGVsdGFzOiBbXCJcIiwgXCJcIiwgXCJcIiwgXCJcIiwgXCJcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGV0aW1lczogW3RoaXMubm93LCB0aGlzLm5vdywgdGhpcy5ub3csIHRoaXMubm93LCB0aGlzLm5vdywgdGhpcy5ub3ddLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkb3NlX3dlaWdodHM6IFtcIlwiLCBcIlwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZG9zZV9lbnJpY2htZW50czogW1wiXCIsIFwiXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0X3dlaWdodHM6IFtcIlwiLCBcIlwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGlsdXRpb25fc3BhY2VfcmF0aW86IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3RfaWQ6IFwiXCIsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGV1dGVyaXVtX2RlbHRhc192YWxpZGF0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBveHlnZW5fZGVsdGFzX3ZhbGlkYXRlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGV0aW1lc192YWxpZGF0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkb3NlX3dlaWdodHNfdmFsaWRhdGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZG9zZV9lbnJpY2htZW50c192YWxpZGF0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0X3dlaWdodHNfdmFsaWRhdGVkOiBmYWxzZSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzOiB7cmVzdWx0czogbnVsbH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpbGUtaW5wdXQnKS52YWx1ZSA9IG51bGw7XG4gICAgfTtcblxuICAgIGhhbmRsZV9jc3ZfdXBsb2FkID0gYXN5bmMgKGV2ZW50OiBGb3JtRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHtcbiAgICAgICAgbGV0IGZpbGUgPSAoZXZlbnQudGFyZ2V0IGFzIGFueSkuZmlsZXNbMF07XG4gICAgICAgIGNvbnNvbGUubG9nKGZpbGUpO1xuICAgICAgICBpZiAoKGZpbGUudHlwZSA9PT0gXCJ0ZXh0L2NzdlwiIHx8IGZpbGUudHlwZSA9PT0gXCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWxcIikgfHwgKGZpbGUudHlwZSA9PT0gXCJcIiAmJiBmaWxlLm5hbWUuZW5kc1dpdGgoXCIuY3N2XCIpKSkge1xuICAgICAgICAgICAgbGV0IGlucHV0cyA9IGF3YWl0IGxvYWRfZnJvbV9jc3YoZmlsZSk7XG4gICAgICAgICAgICBpZiAoaW5wdXRzLmVycm9yIHx8IChpbnB1dHMucmVzdWx0cyA9PSBudWxsKSkge1xuICAgICAgICAgICAgICAgIEFwcFRvYXN0ZXIuc2hvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkVycm9yIHJlYWRpbmcgaW5wdXQgQ1NWIGZpbGUuIEZvciBmb3JtYXR0aW5nIGhlbHAsIHByZXNzICdIZWxwJyBpbiB0aGUgdXBwZXIgcmlnaHQgaGFuZCBjb3JuZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVudDogXCJkYW5nZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQ6IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtpbnB1dF9jc3ZfbmFtZTogZmlsZS5uYW1lfSk7XG4gICAgICAgICAgICAgICAgbGV0IHIgPSBpbnB1dHMucmVzdWx0cztcbiAgICAgICAgICAgICAgICBsZXQgaGl0X2Vycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGlucHV0dGVkX2RfZGVsdGFzID0gW3IuZF9tZWFzXzEsIHIuZF9tZWFzXzIsIHIuZF9tZWFzXzMsIHIuZF9tZWFzXzQsIHIuZF9tZWFzXzVdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgaW5wdXR0ZWRfb19kZWx0YXMgPSBbci5vX21lYXNfMSwgci5vX21lYXNfMiwgci5vX21lYXNfMywgci5vX21lYXNfNCwgci5vX21lYXNfNV07XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTlVNX0RFTFRBUzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZV9kZXV0ZXJpdW1fZGVsdGFfY2hhbmdlKGksIGlucHV0dGVkX2RfZGVsdGFzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlX294eWdlbl9kZWx0YV9jaGFuZ2UoaSwgaW5wdXR0ZWRfb19kZWx0YXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBoaXRfZXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaW5wdXR0ZWRfZGF0ZXMgPSBbci5zYW1wbGVfdGltZV8xLCByLnNhbXBsZV90aW1lXzIsIHIuc2FtcGxlX3RpbWVfMywgci5zYW1wbGVfdGltZV80LCByLnNhbXBsZV90aW1lXzUsIHIuc2FtcGxlX3RpbWVfNl07XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTlVNX1NBTVBMRV9USU1FUzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXR0ZWRfZGF0ZXNbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZV9kYXRlX2NoYW5nZShpLCBpbnB1dHRlZF9kYXRlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGhpdF9lcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyLmRvc2Vfd2VpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHttaXhlZF9kb3NlOiB0cnVlfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZV9kb3NlX3dlaWdodF9jaGFuZ2UoMCwgci5kb3NlX3dlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoci5kb3NlX3dlaWdodF9kICYmIHIuZG9zZV93ZWlnaHRfbykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVfZG9zZV93ZWlnaHRfY2hhbmdlKDAsIHIuZG9zZV93ZWlnaHRfZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZV9kb3NlX3dlaWdodF9jaGFuZ2UoMSwgci5kb3NlX3dlaWdodF9vKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaGl0X2Vycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVfZG9zZV9lbnJpY2htZW50X2NoYW5nZSgwLCByLmRvc2VfZW5yaWNobWVudF9kKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVfZG9zZV9lbnJpY2htZW50X2NoYW5nZSgxLCByLmRvc2VfZW5yaWNobWVudF9vKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVfc3ViamVjdF93ZWlnaHRfY2hhbmdlKDAsIHIuc3ViamVjdF93ZWlnaHRfaW5pdGlhbCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlX3N1YmplY3Rfd2VpZ2h0X2NoYW5nZSgxLCByLnN1YmplY3Rfd2VpZ2h0X2ZpbmFsKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVfZGlsdXRpb25fc3BhY2VfcmF0aW9fY2hhbmdlKDAsIHIucG9wX2RpbHV0aW9uX3NwYWNlX3JhdGlvKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVfc3ViamVjdF9pZF9jaGFuZ2Uoci5zdWJqZWN0X2lkKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGhpdF9lcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChoaXRfZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgQXBwVG9hc3Rlci5zaG93KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIk9uZSBvciBtb3JlIHZhbHVlcyBub3QgaW5wdXR0ZWQgYXV0b21hdGljYWxseS4gQWRkIG1hbnVhbGx5LCBvciBmaXggQ1NWIGZvcm1hdC5cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiIEZvciBmb3JtYXR0aW5nIGhlbHAsIHByZXNzICdIZWxwJyBpbiB0aGUgdXBwZXIgcmlnaHQgaGFuZCBjb3JuZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlbnQ6IFwiZGFuZ2VyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dDogMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgQXBwVG9hc3Rlci5zaG93KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIklucHV0cyBzdWNjZXNzZnVsbHkgbG9hZGVkIGZyb20gXCIuY29uY2F0KHRoaXMuc3RhdGUuaW5wdXRfY3N2X25hbWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVudDogXCJwcmltYXJ5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dDogMzAwMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgQXBwVG9hc3Rlci5zaG93KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJTZWxlY3QgYSAuY3N2IGZpbGUuIEZvciBmb3JtYXR0aW5nIGhlbHAsIHByZXNzICdIZWxwJyBpbiB0aGUgdXBwZXIgcmlnaHQgaGFuZCBjb3JuZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZW50OiBcImRhbmdlclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgaGFuZGxlX2Nzdl9hcHBlbmRfY2hvaWNlID0gKGV2ZW50OiBGb3JtRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHtcbiAgICAgICAgbGV0IGZpbGUgPSAoZXZlbnQudGFyZ2V0IGFzIGFueSkuZmlsZXNbMF07XG4gICAgICAgIGNvbnNvbGUubG9nKGZpbGUpO1xuICAgICAgICBpZiAoKGZpbGUudHlwZSA9PT0gXCJ0ZXh0L2NzdlwiIHx8IGZpbGUudHlwZSA9PT0gXCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWxcIikgfHwgKGZpbGUudHlwZSA9PT0gXCJcIiAmJiBmaWxlLm5hbWUuZW5kc1dpdGgoXCIuY3N2XCIpKSkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7YXBwZW5kX2Nzdl9uYW1lOiBmaWxlLm5hbWUsIG5ld19jc3ZfbmFtZTogXCJcIn0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgQXBwVG9hc3Rlci5zaG93KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJTZWxlY3QgYW4gZXhpc3RpbmcgLmNzdiBmaWxlLlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlbnQ6IFwiZGFuZ2VyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQ6IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBfYmFkX2Zvcm1hdCA9IChzcGVjaWZpY19lcnJvcjogc3RyaW5nKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe2lucHV0X2Nzdl9uYW1lOiBcIlwifSk7XG4gICAgICAgIGxldCBkaXNwbGF5X21zZyA9IFwiSW5jb3JyZWN0IC5jc3YgZm9ybWF0LlwiICsgc3BlY2lmaWNfZXJyb3IgKyBcIiBTZWUgJ0hlbHAnIGZvciBleHBlY3RlZCBmb3JtYXQuXCI7XG4gICAgICAgIEFwcFRvYXN0ZXIuc2hvdyh7bWVzc2FnZTogZGlzcGxheV9tc2csIGludGVudDogXCJkYW5nZXJcIiwgdGltZW91dDogMH0pO1xuICAgIH07XG5cbiAgICBfZXJyb3JfaGFuZGxlciA9IChldmVudDogUHJvZ3Jlc3NFdmVudCkgPT4ge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmIChldmVudC50YXJnZXQuZXJyb3IubmFtZSA9PSBcIk5vdFJlYWRhYmxlRXJyb3JcIikge1xuICAgICAgICAgICAgQXBwVG9hc3Rlci5zaG93KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJGaWxlIG5vdCByZWFkYWJsZS4gRm9yIGZvcm1hdHRpbmcgaGVscCwgcHJlc3MgJ0hlbHAnIGluIHRoZSB1cHBlciByaWdodCBoYW5kIGNvcm5lclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlbnQ6IFwiZGFuZ2VyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQ6IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjaGVja19udW1lcmljYWxfaW5wdXRzID0gKGlucHV0X2FyYXk6IChzdHJpbmcgfCBudW1iZXIpW10pID0+IHtcbiAgICAgICAgZm9yIChsZXQgdmFsdWUgb2YgaW5wdXRfYXJheSkge1xuICAgICAgICAgICAgaWYgKGlzTmFOKCt2YWx1ZSkgfHwgdmFsdWUgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIF9mbGFnX25vbl9udW1lcmljYWxfaW5wdXQgPSAoKSA9PiB7XG4gICAgICAgIEFwcFRvYXN0ZXIuc2hvdyh7bWVzc2FnZTogXCJFbnRlciBhIG51bWVyaWMgdmFsdWVcIiwgaW50ZW50OiBcImRhbmdlclwiLCB0aW1lb3V0OiAzMDAwfSk7XG4gICAgfTtcblxuICAgIF9mbGFnX25vbl9kYXRlX2lucHV0ID0gKCkgPT4ge1xuICAgICAgICBBcHBUb2FzdGVyLnNob3coe21lc3NhZ2U6IFwiRW50ZXIgYSB2YWxpZCBkYXRlXCIsIGludGVudDogXCJkYW5nZXJcIiwgdGltZW91dDogMzAwMH0pO1xuICAgIH07XG5cbiAgICBoYW5kbGVfZGV1dGVyaXVtX2RlbHRhX2NoYW5nZSA9IChpbmRleDogbnVtYmVyLCBldmVudDogRm9ybUV2ZW50PEhUTUxFbGVtZW50PiB8IHN0cmluZykgPT4ge1xuICAgICAgICBsZXQgdmFsdWUgPSAodHlwZW9mIGV2ZW50ID09PSBcInN0cmluZ1wiKSA/IGV2ZW50IDogKGV2ZW50LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZTtcbiAgICAgICAgbGV0IHZhbHVlc19zZXBfYnlfc3BhY2VzID0gdmFsdWUuc3BsaXQoXCIgXCIpO1xuICAgICAgICB2YWx1ZXNfc2VwX2J5X3NwYWNlcyA9IHZhbHVlc19zZXBfYnlfc3BhY2VzLmZpbHRlcigodmFsdWU6IHN0cmluZykgPT4gdmFsdWUgIT09IFwiXCIpO1xuICAgICAgICBpZiAodmFsdWVzX3NlcF9ieV9zcGFjZXMubGVuZ3RoID09PSAxIHx8IHZhbHVlID09PSBcIlwiKSB7XG4gICAgICAgICAgICBpZiAoIWlzTmFOKCt2YWx1ZSkgfHwgdmFsdWUgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICBsZXQgbmV3X2RlbHRhcyA9IHRoaXMuc3RhdGUuZGV1dGVyaXVtX2RlbHRhcztcbiAgICAgICAgICAgICAgICBuZXdfZGVsdGFzLnNwbGljZShpbmRleCwgMSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldXRlcml1bV9kZWx0YXM6IG5ld19kZWx0YXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV1dGVyaXVtX2RlbHRhc192YWxpZGF0ZWQ6IHRoaXMuY2hlY2tfbnVtZXJpY2FsX2lucHV0cyhuZXdfZGVsdGFzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgdGhpcy5fZmxhZ19ub25fbnVtZXJpY2FsX2lucHV0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlc19zZXBfYnlfc3BhY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVfZGV1dGVyaXVtX2RlbHRhX2NoYW5nZShpbmRleCArIGksIHZhbHVlc19zZXBfYnlfc3BhY2VzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBoYW5kbGVfb3h5Z2VuX2RlbHRhX2NoYW5nZSA9IChpbmRleDogbnVtYmVyLCBldmVudDogRm9ybUV2ZW50PEhUTUxFbGVtZW50PiB8IHN0cmluZykgPT4ge1xuICAgICAgICBsZXQgdmFsdWUgPSAodHlwZW9mIGV2ZW50ID09PSBcInN0cmluZ1wiKSA/IGV2ZW50IDogKGV2ZW50LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZTtcbiAgICAgICAgbGV0IHZhbHVlc19zZXBfYnlfc3BhY2VzID0gdmFsdWUuc3BsaXQoXCIgXCIpO1xuICAgICAgICB2YWx1ZXNfc2VwX2J5X3NwYWNlcyA9IHZhbHVlc19zZXBfYnlfc3BhY2VzLmZpbHRlcigodmFsdWU6IHN0cmluZykgPT4gdmFsdWUgIT09IFwiXCIpO1xuICAgICAgICBpZiAodmFsdWVzX3NlcF9ieV9zcGFjZXMubGVuZ3RoID09PSAxIHx8IHZhbHVlID09PSBcIlwiKSB7XG4gICAgICAgICAgICBpZiAoIWlzTmFOKCt2YWx1ZSkgfHwgKHZhbHVlID09PSBcIlwiKSkge1xuICAgICAgICAgICAgICAgIGxldCBuZXdfZGVsdGFzID0gdGhpcy5zdGF0ZS5veHlnZW5fZGVsdGFzO1xuICAgICAgICAgICAgICAgIG5ld19kZWx0YXMuc3BsaWNlKGluZGV4LCAxLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3h5Z2VuX2RlbHRhczogbmV3X2RlbHRhcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBveHlnZW5fZGVsdGFzX3ZhbGlkYXRlZDogdGhpcy5jaGVja19udW1lcmljYWxfaW5wdXRzKG5ld19kZWx0YXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB0aGlzLl9mbGFnX25vbl9udW1lcmljYWxfaW5wdXQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVzX3NlcF9ieV9zcGFjZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZV9veHlnZW5fZGVsdGFfY2hhbmdlKGluZGV4ICsgaSwgdmFsdWVzX3NlcF9ieV9zcGFjZXNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIGhhbmRsZV9kYXRlX2NoYW5nZSA9IChpbmRleDogbnVtYmVyLCB2YWx1ZTogc3RyaW5nIHwgbW9tZW50Lk1vbWVudCkgPT4ge1xuICAgICAgICBsZXQgbmV3X2RhdGVfYXJyYXkgPSB0aGlzLnN0YXRlLmRhdGV0aW1lcztcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBsZXQgYWxsX2RhdGVzX2ZpbGxlZCA9IHRydWU7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGluZGV4OyBqKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoKG5ld19kYXRlX2FycmF5W2pdICE9IHRoaXMubm93KSAmJiB2YWx1ZS5pc0JlZm9yZShuZXdfZGF0ZV9hcnJheVtqXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgQXBwVG9hc3Rlci5zaG93KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkNvbGxlY3Rpb24gZGF0ZXMgbXVzdCBiZSBpbiBjaHJvbm9sb2dpY2FsIG9yZGVyLlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVudDogXCJkYW5nZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2YWx1ZS5pc1NhbWUobmV3X2RhdGVfYXJyYXlbal0pKSB7XG4gICAgICAgICAgICAgICAgICAgIEFwcFRvYXN0ZXIuc2hvdyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJEdXBsaWNhdGUgY29sbGVjdGlvbiBkYXRlcyBlbnRlcmVkXCIsIGludGVudDogXCJkYW5nZXJcIiwgdGltZW91dDogMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdfZGF0ZV9hcnJheS5zcGxpY2UoaW5kZXgsIDEsIHZhbHVlKTtcbiAgICAgICAgICAgIGZvciAobGV0IGRhdGUgb2YgbmV3X2RhdGVfYXJyYXkpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZSA9PT0gdGhpcy5ub3cpIHtcbiAgICAgICAgICAgICAgICAgICAgYWxsX2RhdGVzX2ZpbGxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGV0aW1lczogbmV3X2RhdGVfYXJyYXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRldGltZXNfdmFsaWRhdGVkOiBhbGxfZGF0ZXNfZmlsbGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHNwbGl0X3ZhbHVlcyA9IHZhbHVlLnNwbGl0KFwiIFwiKTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgIG5ld19kYXRlX2FycmF5LnNwbGljZShpbmRleCwgMSwgdGhpcy5ub3cpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2RhdGV0aW1lczogbmV3X2RhdGVfYXJyYXksIGRhdGV0aW1lc192YWxpZGF0ZWQ6IGZhbHNlfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICAgICAgICBsZXQgc2tpcHBlZF9pbmRpY2VzID0gMDsgLy8gdHJhY2sgaW5kaWNlcyB0byBwbGFjZSBkYXRlcyBpbiBjb3JyZWN0IGJveGVzXG4gICAgICAgICAgICAgICAgd2hpbGUgKGkgPCBzcGxpdF92YWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGRlYWwgd2l0aCBzcGFjZXMgYmV0d2VlbiBkYXRlIGFuZCB0aW1lXG4gICAgICAgICAgICAgICAgICAgIGlmIChtb21lbnQucGFyc2Vab25lKG5ldyBEYXRlKHNwbGl0X3ZhbHVlc1tpXSkpLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPCBzcGxpdF92YWx1ZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtb21lbnQucGFyc2Vab25lKG5ldyBEYXRlKHNwbGl0X3ZhbHVlc1tpICsgMV0pKS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9ib3RoIHZhbGlkIGRhdGVzLSBkb24ndCBuZWVkIHRvIHdvcnJ5IGFib3V0IHNwYWNlcywgdHJlYXQgdGhlbSBhcyBzZXBhcmF0ZSBkYXRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXNfbW9tZW50ID0gY29udmVydF9zdHJpbmdfdG9fbW9tZW50KHNwbGl0X3ZhbHVlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXNfbW9tZW50ICE9PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVfZGF0ZV9jaGFuZ2UoaW5kZXggKyBpLCBhc19tb21lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAvLyBuZXh0IHZhbHVlIGlzbid0IGEgdmFsaWQgZGF0ZS0gbGlrZWx5IGEgdGltZS4gdGFjayBpdCBvbnRvIHRoZSBkYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhc19tb21lbnQgPSBjb252ZXJ0X3N0cmluZ190b19tb21lbnQoc3BsaXRfdmFsdWVzW2ldLmNvbmNhdChcIiBcIiwgc3BsaXRfdmFsdWVzW2kgKyAxXSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFzX21vbWVudCAhPT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlX2RhdGVfY2hhbmdlKGluZGV4ICsgaSAtIHNraXBwZWRfaW5kaWNlcywgYXNfbW9tZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwcGVkX2luZGljZXMrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSArPSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFzX21vbWVudCA9IGNvbnZlcnRfc3RyaW5nX3RvX21vbWVudChzcGxpdF92YWx1ZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXNfbW9tZW50ICE9PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZV9kYXRlX2NoYW5nZShpbmRleCArIGksIGFzX21vbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZsYWdfbm9uX2RhdGVfaW5wdXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBoYW5kbGVfZG9zZV93ZWlnaHRfY2hhbmdlID0gKGluZGV4OiBudW1iZXIsIGV2ZW50OiBGb3JtRXZlbnQ8SFRNTEVsZW1lbnQ+IHwgc3RyaW5nKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLm1peGVkX2Rvc2UpIHtcbiAgICAgICAgICAgIC8vIGlmIG1peGVkLCBzZXQgYm90aCB2YWx1ZXMgdG8gdGhpc1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVfZG9zZV93ZWlnaHRfY2hhbmdlKDEsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdmFsdWUgPSAodHlwZW9mIGV2ZW50ID09IFwic3RyaW5nXCIpID8gZXZlbnQgOiAoZXZlbnQudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xuICAgICAgICBsZXQgdmFsdWVzX3NlcF9ieV9zcGFjZXMgPSB2YWx1ZS5zcGxpdChcIiBcIik7XG4gICAgICAgIHZhbHVlc19zZXBfYnlfc3BhY2VzID0gdmFsdWVzX3NlcF9ieV9zcGFjZXMuZmlsdGVyKCh2YWx1ZTogc3RyaW5nKSA9PiB2YWx1ZSAhPT0gXCJcIik7XG4gICAgICAgIGlmICh2YWx1ZXNfc2VwX2J5X3NwYWNlcy5sZW5ndGggPT09IDEgfHwgdmFsdWUgPT09IFwiXCIpIHtcbiAgICAgICAgICAgIGlmICghaXNOYU4oK3ZhbHVlKSB8fCB2YWx1ZSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgIGxldCBuZXdfZG9zZV93ZWlnaHRzID0gdGhpcy5zdGF0ZS5kb3NlX3dlaWdodHM7XG4gICAgICAgICAgICAgICAgbmV3X2Rvc2Vfd2VpZ2h0cy5zcGxpY2UoaW5kZXgsIDEsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3NlX3dlaWdodHM6IG5ld19kb3NlX3dlaWdodHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9zZV93ZWlnaHRzX3ZhbGlkYXRlZDogdGhpcy5jaGVja19udW1lcmljYWxfaW5wdXRzKG5ld19kb3NlX3dlaWdodHMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB0aGlzLl9mbGFnX25vbl9udW1lcmljYWxfaW5wdXQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVzX3NlcF9ieV9zcGFjZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZV9kb3NlX3dlaWdodF9jaGFuZ2UoaW5kZXggKyBpLCB2YWx1ZXNfc2VwX2J5X3NwYWNlc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgaGFuZGxlX2Rvc2VfZW5yaWNobWVudF9jaGFuZ2UgPSAoaW5kZXg6IG51bWJlciwgZXZlbnQ6IEZvcm1FdmVudDxIVE1MRWxlbWVudD4gfCBzdHJpbmcpID0+IHtcbiAgICAgICAgbGV0IHZhbHVlID0gKHR5cGVvZiBldmVudCA9PSBcInN0cmluZ1wiKSA/IGV2ZW50IDogKGV2ZW50LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZTtcbiAgICAgICAgbGV0IHZhbHVlc19zZXBfYnlfc3BhY2VzID0gdmFsdWUuc3BsaXQoXCIgXCIpO1xuICAgICAgICB2YWx1ZXNfc2VwX2J5X3NwYWNlcyA9IHZhbHVlc19zZXBfYnlfc3BhY2VzLmZpbHRlcigodmFsdWU6IHN0cmluZykgPT4gdmFsdWUgIT09IFwiXCIpO1xuICAgICAgICBpZiAodmFsdWVzX3NlcF9ieV9zcGFjZXMubGVuZ3RoID09PSAxIHx8IHZhbHVlID09PSBcIlwiKSB7XG4gICAgICAgICAgICBpZiAoIWlzTmFOKCt2YWx1ZSkgfHwgdmFsdWUgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICBsZXQgbmV3X2VucmljaG1lbnRzID0gdGhpcy5zdGF0ZS5kb3NlX2VucmljaG1lbnRzO1xuICAgICAgICAgICAgICAgIG5ld19lbnJpY2htZW50cy5zcGxpY2UoaW5kZXgsIDEsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3NlX2VucmljaG1lbnRzOiBuZXdfZW5yaWNobWVudHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9zZV9lbnJpY2htZW50c192YWxpZGF0ZWQ6IHRoaXMuY2hlY2tfbnVtZXJpY2FsX2lucHV0cyhuZXdfZW5yaWNobWVudHMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB0aGlzLl9mbGFnX25vbl9udW1lcmljYWxfaW5wdXQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVzX3NlcF9ieV9zcGFjZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZV9kb3NlX2VucmljaG1lbnRfY2hhbmdlKGluZGV4ICsgaSwgdmFsdWVzX3NlcF9ieV9zcGFjZXNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIGhhbmRsZV9zdWJqZWN0X3dlaWdodF9jaGFuZ2UgPSAoaW5kZXg6IG51bWJlciwgZXZlbnQ6IEZvcm1FdmVudDxIVE1MRWxlbWVudD4gfCBzdHJpbmcpID0+IHtcbiAgICAgICAgbGV0IHZhbHVlID0gKHR5cGVvZiBldmVudCA9PSBcInN0cmluZ1wiKSA/IGV2ZW50IDogKGV2ZW50LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZTtcbiAgICAgICAgbGV0IHZhbHVlc19zZXBfYnlfc3BhY2VzID0gdmFsdWUuc3BsaXQoXCIgXCIpO1xuICAgICAgICB2YWx1ZXNfc2VwX2J5X3NwYWNlcyA9IHZhbHVlc19zZXBfYnlfc3BhY2VzLmZpbHRlcigodmFsdWU6IHN0cmluZykgPT4gdmFsdWUgIT09IFwiXCIpO1xuICAgICAgICBpZiAodmFsdWVzX3NlcF9ieV9zcGFjZXMubGVuZ3RoID09PSAxIHx8IHZhbHVlID09PSBcIlwiKSB7XG4gICAgICAgICAgICBpZiAoIWlzTmFOKCt2YWx1ZSkgfHwgdmFsdWUgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICBsZXQgbmV3X3dlaWdodHMgPSB0aGlzLnN0YXRlLnN1YmplY3Rfd2VpZ2h0cztcbiAgICAgICAgICAgICAgICBuZXdfd2VpZ2h0cy5zcGxpY2UoaW5kZXgsIDEsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0X3dlaWdodHM6IG5ld193ZWlnaHRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YmplY3Rfd2VpZ2h0c192YWxpZGF0ZWQ6IHRoaXMuY2hlY2tfbnVtZXJpY2FsX2lucHV0cyhuZXdfd2VpZ2h0cylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHRoaXMuX2ZsYWdfbm9uX251bWVyaWNhbF9pbnB1dCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXNfc2VwX2J5X3NwYWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlX3N1YmplY3Rfd2VpZ2h0X2NoYW5nZShpbmRleCArIGksIHZhbHVlc19zZXBfYnlfc3BhY2VzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBoYW5kbGVfc3ViamVjdF9pZF9jaGFuZ2UgPSAoZXZlbnQ6IEZvcm1FdmVudDxIVE1MRWxlbWVudD4gfCBzdHJpbmcpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUucmVzdWx0cy5yZXN1bHRzKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtjbGVhcl9wb3B1cF9vcGVuOiB0cnVlfSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHZhbHVlID0gKHR5cGVvZiBldmVudCA9PSBcInN0cmluZ1wiKSA/IGV2ZW50IDogKGV2ZW50LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7c3ViamVjdF9pZDogdmFsdWV9KTtcbiAgICB9O1xuXG4gICAgaGFuZGxlX2RpbHV0aW9uX3NwYWNlX3JhdGlvX2NoYW5nZSA9IChpbmRleDogbnVtYmVyLCBldmVudDogRm9ybUV2ZW50PEhUTUxFbGVtZW50PiB8IHN0cmluZykgPT4ge1xuICAgICAgICBsZXQgdmFsdWUgPSAodHlwZW9mIGV2ZW50ID09IFwic3RyaW5nXCIpID8gZXZlbnQgOiAoZXZlbnQudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtkaWx1dGlvbl9zcGFjZV9yYXRpbzogdmFsdWV9KTtcbiAgICB9XG5cbn1cbiJdfQ==
