"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var core_1 = require("@blueprintjs/core");
var DateTimePicker = require("react-datetime");
var moment_1 = require("moment");
var Requests_1 = require("./Requests");
var cjs_1 = require("@blueprintjs/core/lib/cjs");
var NumberInput_1 = require("./NumberInput");
var DEUTERIUM = "Deuterium";
var OXYGEN = "Oxygen 18";
var ELEMENTS = [DEUTERIUM, OXYGEN];
var NUM_SAMPLE_TIMES = 5;
var SAMPLE_LABELS = ['Background', 'PD4', 'PD5', 'ED4', 'ED5'];
var AppToaster = core_1.Toaster.create({ className: "app-toaster", position: core_1.Position.TOP_RIGHT });
var DLWApp = /** @class */ (function (_super) {
    __extends(DLWApp, _super);
    function DLWApp(props) {
        var _this = _super.call(this, props) || this;
        _this.submit_inputs = function () { return __awaiter(_this, void 0, void 0, function () {
            var datetimes, results;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        datetimes = this.state.datetimes.map(function (value) {
                            return value.toArray();
                        });
                        return [4 /*yield*/, Requests_1.calculate_from_inputs({
                                d_deltas: this.state.deuterium_deltas,
                                o_deltas: this.state.oxygen_deltas,
                                datetimes: datetimes,
                                dose_weights: this.state.dose_weights,
                                dose_enrichments: this.state.dose_enrichments,
                                subject_weights: this.state.subject_weights,
                                csv_name: this.state.csv_name,
                                subject_id: this.state.subject_id,
                                mixed_dose: this.state.mixed_dose
                            })];
                    case 1:
                        results = _a.sent();
                        if (results.calculations && results.error_flags && results.rco2_ee) {
                            this.setState({
                                results: {
                                    calculations: results.calculations,
                                    rco2_ee: results.rco2_ee,
                                    error_flags: results.error_flags
                                }
                            });
                        }
                        return [2 /*return*/];
                }
            });
        }); };
        _this.handle_csv_upload = function (event) { return __awaiter(_this, void 0, void 0, function () {
            var file, reader;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        file = event.target.files[0];
                        if (!(file.type === "text/csv")) return [3 /*break*/, 2];
                        this.setState({ input_csv_name: file.name });
                        reader = new FileReader();
                        reader.onload = this._load_handler;
                        reader.onerror = this._error_handler;
                        return [4 /*yield*/, reader.readAsText(file)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        AppToaster.show({
                            message: "Select a .csv file. For formatting help, press 'Help' in the upper right hand corner",
                            intent: "danger",
                            timeout: 0
                        });
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        }); };
        _this._load_handler = function (event) {
            console.log("into load handler");
            // @ts-ignore
            var csv = event.target.result;
            var all_text_lines = csv.split(/\r\n|\n/);
            var columns = all_text_lines[0].split(',');
            console.log('columns', columns);
            try {
                var data = all_text_lines[1].split(',');
                console.log('data is', data);
                //make this more modular deal with other csv orders
                var d_deltas = data.slice(0, 5);
                var o_deltas = data.slice(5, 10);
                var sample_times = data.slice(10, 15);
                var dose_weights = data.slice(15, 17);
                var dose_enrichments = data.slice(17, 19);
                var subject_weights = data.slice(19, 21);
                var subject_id = data.slice(21, 22);
                for (var i = 0; i < d_deltas.length; i++) {
                    _this.handle_deuterium_delta_change(i, { target: { value: d_deltas[i] } });
                    _this.handle_oxygen_delta_change(i, { target: { value: o_deltas[i] } });
                    _this.handle_date_change(i, moment_1.utc(sample_times[i]));
                }
                for (var i = 0; i < dose_weights.length; i++) {
                    _this.handle_dose_weight_change(i, { target: { value: dose_weights[i] } });
                    _this.handle_dose_enrichment_change(i, { target: { value: dose_enrichments[i] } });
                    _this.handle_subject_weight_change(i, { target: { value: subject_weights[i] } });
                }
                _this.setState({ subject_id: subject_id });
            }
            catch (e) {
                _this._bad_format("");
            }
        };
        _this._bad_format = function (specific_error) {
            _this.setState({ input_csv_name: "" });
            var display_msg = "Incorrect .csv format." + specific_error + " See 'Help' for expected format.";
            AppToaster.show({ message: display_msg, intent: "danger", timeout: 0 });
        };
        _this._error_handler = function (event) {
            // @ts-ignore
            if (event.target.error.name == "NotReadableError") {
                AppToaster.show({
                    message: "File not readable. For formatting help, press 'Help' in the upper right hand corner",
                    intent: "danger",
                    timeout: 0
                });
            }
        };
        _this.check_numerical_inputs = function (input_aray) {
            for (var _i = 0, input_aray_1 = input_aray; _i < input_aray_1.length; _i++) {
                var value = input_aray_1[_i];
                if (isNaN(+value) || value === "") {
                    return false;
                }
            }
            return true;
        };
        _this.handle_deuterium_delta_change = function (index, event) {
            var value = event.target.value;
            if (!isNaN(+value)) {
                var new_deltas = _this.state.deuterium_deltas;
                new_deltas.splice(index, 1, value);
                _this.setState({
                    deuterium_deltas: new_deltas,
                    deuterium_deltas_validated: _this.check_numerical_inputs(new_deltas)
                });
            }
        };
        _this.handle_oxygen_delta_change = function (index, event) {
            var value = event.target.value;
            if (!isNaN(+value)) {
                var new_deltas = _this.state.oxygen_deltas;
                new_deltas.splice(index, 1, value);
                _this.setState({
                    oxygen_deltas: new_deltas,
                    oxygen_deltas_validated: _this.check_numerical_inputs(new_deltas)
                });
            }
        };
        _this.handle_date_change = function (i, value) {
            console.log('into handle date change- got value', value, typeof (value));
            if (typeof value != "string") {
                var all_dates_filled = true;
                var new_date_array = _this.state.datetimes;
                var dates_chronological = _this.state.dates_chronological;
                dates_chronological.splice(i, 1, true);
                for (var j = 0; j < i; j++) {
                    if (typeof (new_date_array[j]) != "string") {
                        if (value.isBefore(new_date_array[j])) {
                            dates_chronological.splice(i, 1, false);
                            all_dates_filled = false;
                            break;
                        }
                    }
                }
                new_date_array.splice(i, 1, value);
                for (var _i = 0, new_date_array_1 = new_date_array; _i < new_date_array_1.length; _i++) {
                    var date = new_date_array_1[_i];
                    if (typeof date === "string") {
                        all_dates_filled = false;
                        break;
                    }
                }
                _this.setState({
                    datetimes: new_date_array,
                    datetimes_validated: all_dates_filled,
                    dates_chronological: dates_chronological
                });
            }
        };
        _this.handle_dose_weight_change = function (index, event) {
            var value = event.target.value;
            if (!isNaN(+value)) {
                var new_dose_weights = _this.state.dose_weights;
                new_dose_weights.splice(index, 1, value);
                _this.setState({
                    dose_weights: new_dose_weights,
                    dose_weights_validated: _this.check_numerical_inputs(new_dose_weights)
                });
            }
        };
        _this.handle_dose_enrichment_change = function (index, event) {
            var value = event.target.value;
            if (!isNaN(+value)) {
                var new_enrichments = _this.state.dose_enrichments;
                new_enrichments.splice(index, 1, value);
                _this.setState({
                    dose_enrichments: new_enrichments,
                    dose_enrichments_validated: _this.check_numerical_inputs(new_enrichments)
                });
            }
        };
        _this.handle_subject_weight_change = function (index, event) {
            var value = event.target.value;
            if (!isNaN(+value)) {
                var new_weights = _this.state.subject_weights;
                new_weights.splice(index, 1, value);
                _this.setState({
                    subject_weights: new_weights,
                    subject_weights_validated: _this.check_numerical_inputs(new_weights)
                });
            }
        };
        _this.state = {
            input_csv_name: "",
            info_overlay_open: false,
            deuterium_deltas: ["", "", "", "", ""],
            oxygen_deltas: ["", "", "", "", ""],
            datetimes: ["", "", "", "", ""],
            dose_weights: ["", ""],
            dose_enrichments: ["", ""],
            mixed_dose: false,
            subject_weights: ["", ""],
            subject_id: "",
            deuterium_deltas_validated: false,
            oxygen_deltas_validated: false,
            datetimes_validated: false,
            dose_weights_validated: false,
            dose_enrichments_validated: false,
            subject_weights_validated: false,
            dates_chronological: [true, true, true, true, true],
            results: { calculations: null, rco2_ee: null, error_flags: null },
            csv_name: "",
        };
        return _this;
    }
    DLWApp.prototype.render = function () {
        var _this = this;
        var all_inputs_validated = (this.state.deuterium_deltas_validated && this.state.oxygen_deltas_validated
            && this.state.datetimes_validated && this.state.dose_weights_validated
            && this.state.dose_enrichments_validated && this.state.subject_weights_validated
            && this.state.subject_id);
        var deuterium_delta_inputs = [];
        var oxygen_delta_inputs = [];
        var collection_time_inputs = [];
        var _loop_1 = function (i) {
            deuterium_delta_inputs.push(React.createElement(NumberInput_1.NumberInput, { placeholder: SAMPLE_LABELS[i] + " Deuterium delta", index: i, key: i, change_function: this_1.handle_deuterium_delta_change, unit: "permil", value: this_1.state.deuterium_deltas[i] }));
            oxygen_delta_inputs.push(React.createElement(NumberInput_1.NumberInput, { placeholder: SAMPLE_LABELS[i] + ' Oxygen 18 delta', index: i, key: i, unit: "permil", change_function: this_1.handle_oxygen_delta_change, value: this_1.state.oxygen_deltas[i] }));
            collection_time_inputs.push(React.createElement(core_1.Popover, { content: React.createElement("p", null, "Collection time inputs must be in chronological order."), className: 'date-warning-popover', isOpen: !this_1.state.dates_chronological[i] },
                React.createElement(DateTimePicker, { onChange: function (value) { return _this.handle_date_change(i, value); }, inputProps: {
                        className: 'date-input-box .bp3-input',
                        placeholder: ' ' + SAMPLE_LABELS[i] + ' sample date and time'
                    }, key: i, value: this_1.state.datetimes[i], dateFormat: "YYYY-MM-DD", timeFormat: "HH:mm" })));
        };
        var this_1 = this;
        for (var i = 0; i < NUM_SAMPLE_TIMES; i++) {
            _loop_1(i);
        }
        var dose_weight_inputs = [];
        var dose_enrichment_inputs = [];
        for (var i = 0; i < ELEMENTS.length; i++) {
            dose_weight_inputs.push(React.createElement(NumberInput_1.NumberInput, { placeholder: ELEMENTS[i] + ' dose weight (g)', index: i, key: i, unit: "g", change_function: this.handle_dose_weight_change, value: this.state.dose_weights[i] }));
            dose_enrichment_inputs.push(React.createElement(NumberInput_1.NumberInput, { placeholder: ELEMENTS[i] + ' dose enrichment (ppm)', index: i, key: i, change_function: this.handle_dose_enrichment_change, value: this.state.dose_enrichments[i], unit: "ppm" }));
        }
        var results_display = React.createElement("div", null);
        if (this.state.results.calculations && this.state.results.rco2_ee && this.state.results.error_flags) {
            var results_calculations = [];
            var results_rco2_ee = [];
            var results_error_flags = [];
            results_calculations.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.calculations.ndp_kg[0] + ":"),
                React.createElement("p", { className: "result-value" }, this.state.results.calculations.ndp_kg[1] + " kg")));
            results_calculations.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.calculations.kd_hr[0] + ":"),
                React.createElement("p", { className: "result-value" }, this.state.results.calculations.kd_hr[1])));
            results_calculations.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.calculations.nop_kg[0] + ":"),
                React.createElement("p", { className: "result-value" }, this.state.results.calculations.nop_kg[1] + " kg")));
            results_calculations.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.calculations.ko_hr[0] + ":"),
                React.createElement("p", { className: "result-value" }, this.state.results.calculations.ko_hr[1])));
            results_calculations.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.calculations.body_water_avg_kg[0] + ":"),
                React.createElement("p", { className: "result-value" }, this.state.results.calculations.body_fat_percentage[1] + " kg")));
            results_calculations.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.calculations.fat_free_mass_kg[0] + ":"),
                React.createElement("p", { className: "result-value" }, this.state.results.calculations.fat_free_mass_kg[1] + " kg")));
            results_calculations.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.calculations.fat_mass_kg[0] + ":"),
                React.createElement("p", { className: "result-value" }, this.state.results.calculations.fat_mass_kg[1] + " kg")));
            results_calculations.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.calculations.body_fat_percentage[0] + ":"),
                React.createElement("p", { className: "result-value" }, this.state.results.calculations.body_fat_percentage[1] + "%")));
            results_rco2_ee.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.rco2_ee.rco2_mol_day[0] + ":"),
                React.createElement("p", { className: "result-value" }, this.state.results.rco2_ee.rco2_mol_day[1] + " mol/day")));
            results_rco2_ee.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.rco2_ee.rco2_l_hr[0] + ":"),
                React.createElement("p", { className: "result-value" }, this.state.results.rco2_ee.rco2_l_hr[1] + " L/hour")));
            results_rco2_ee.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.rco2_ee.ee_kcal_day[0] + ":"),
                React.createElement("p", { className: "result-value" }, this.state.results.rco2_ee.ee_kcal_day[1] + " kcal/day")));
            results_rco2_ee.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.rco2_ee.ee_mj_day[0] + ":"),
                React.createElement("p", { className: "result-value" }, this.state.results.rco2_ee.ee_mj_day[1] + " MJ/day")));
            var error_okay = "error-okay";
            var outside_error_bars = "error_not_okay";
            var error_class = ((parseFloat(this.state.results.error_flags.plateau_2h[1]) < 0.05) ? error_okay : outside_error_bars);
            results_error_flags.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.error_flags.plateau_2h[0] + ":"),
                React.createElement("p", { className: "result-value " + error_class }, this.state.results.error_flags.plateau_2h[1])));
            error_class = ((parseFloat(this.state.results.error_flags.plateau_180[1]) < 0.05) ? error_okay : outside_error_bars);
            results_error_flags.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.error_flags.plateau_180[0] + ":"),
                React.createElement("p", { className: "result-value " + error_class }, this.state.results.error_flags.plateau_180[1])));
            error_class = ((parseFloat(this.state.results.error_flags.ds_ratio[1]) < 1.070 &&
                parseFloat(this.state.results.error_flags.ds_ratio[1]) > 1) ? error_okay : outside_error_bars);
            results_error_flags.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.error_flags.ds_ratio[0] + ":"),
                React.createElement("p", { className: "result-value " + error_class }, this.state.results.error_flags.ds_ratio[1])));
            error_class = ((parseFloat(this.state.results.error_flags.ee[1]) < 10) ? error_okay : outside_error_bars);
            results_error_flags.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.error_flags.ee[0] + ":"),
                React.createElement("p", { className: "result-value " + error_class }, this.state.results.error_flags.ee[1] + "%")));
            error_class = ((parseFloat(this.state.results.error_flags.ko_kd[1]) < 1.7 &&
                parseFloat(this.state.results.error_flags.ko_kd[1]) > 1.1) ? error_okay : outside_error_bars);
            results_error_flags.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.error_flags.ko_kd[0] + ":"),
                React.createElement("p", { className: "result-value " + error_class }, this.state.results.error_flags.ko_kd[1])));
            results_display = (React.createElement("div", { className: 'results-display' },
                React.createElement(cjs_1.Card, { className: 'results-card' },
                    React.createElement("h1", null, 'Results for subject ' + this.state.subject_id),
                    React.createElement("div", { className: 'result-sections' },
                        React.createElement("div", { className: 'result-section' },
                            React.createElement("h5", { className: 'result-header-calc' }, "Calculations"),
                            results_calculations),
                        React.createElement("div", { className: 'result-section' },
                            React.createElement("h5", { className: 'result-header-calc' }, "rCO2 and EE, intercept method"),
                            results_rco2_ee),
                        React.createElement("div", { className: 'result-section' },
                            React.createElement("h5", { className: 'result-header-error' }, "Error Flags"),
                            results_error_flags)))));
        }
        return (React.createElement(cjs_1.Navbar, { className: 'dlw-nav' },
            React.createElement(core_1.Dialog, { isOpen: this.state.info_overlay_open, canEscapeKeyClose: true, canOutsideClickClose: false, hasBackdrop: true, isCloseButtonShown: true, onClose: function () {
                    _this.setState({ info_overlay_open: false });
                }, title: 'How to use the Doubly Labeled Water App' },
                React.createElement("p", null, "some helpful text- include CSV formatting")),
            React.createElement(cjs_1.NavbarGroup, { align: core_1.Alignment.LEFT },
                React.createElement(cjs_1.Navbar.Heading, { className: 'dlw-title' }, "Doubly Labeled Water")),
            React.createElement(cjs_1.NavbarGroup, { align: core_1.Alignment.RIGHT },
                React.createElement(cjs_1.NavbarHeading, { className: 'tagline' }, "an open source project"),
                React.createElement("img", { src: "assets/logo_cuhs.png", alt: "University of Colorado Anschutz Medical Campus logo", style: { 'height': 30 } }),
                React.createElement(cjs_1.NavbarDivider, null),
                React.createElement("a", { href: "https://github.com/jchmyz/DoublyLabeledWater", target: "_blank" }, "DoublyLabeledWater on GitHub"),
                React.createElement(cjs_1.NavbarDivider, null),
                React.createElement(core_1.Button, { icon: "help", minimal: true, onClick: function () { return _this.setState({ info_overlay_open: true }); } }, "Help")),
            React.createElement(core_1.FormGroup, { className: 'dlw-app' },
                React.createElement("div", { className: 'load-from-csv' },
                    React.createElement("h5", null, "Load input data from .csv file"),
                    React.createElement(core_1.FileInput, { text: this.state.input_csv_name || "Choose file...", onInputChange: this.handle_csv_upload, disabled: !!(this.state.input_csv_name) })),
                React.createElement("div", { className: 'samples' },
                    React.createElement("div", { className: 'date-inputs' },
                        React.createElement("h5", null, "Collection Dates and Times"),
                        collection_time_inputs),
                    React.createElement("div", { className: 'delta-inputs' },
                        React.createElement("h5", null, "Deuterium Delta Values"),
                        deuterium_delta_inputs),
                    React.createElement("div", { className: 'delta-inputs' },
                        React.createElement("h5", null, "Oxygen 18 Delta Values"),
                        oxygen_delta_inputs)),
                React.createElement("div", { className: 'element-wise-inputs' },
                    React.createElement("div", { className: 'inputs-by-element' },
                        React.createElement("h5", null, "Dose Weights"),
                        dose_weight_inputs),
                    React.createElement("div", { className: 'inputs-by-element' },
                        React.createElement("h5", null, "Dose Enrichments"),
                        dose_enrichment_inputs),
                    React.createElement("div", { className: 'inputs-by-element' },
                        React.createElement(core_1.Checkbox, { checked: this.state.mixed_dose, label: "Mixed Dose", onChange: function () {
                                _this.setState({ mixed_dose: !_this.state.mixed_dose });
                            } }))),
                React.createElement("div", { className: 'element-wise-inputs' },
                    React.createElement("div", { className: 'inputs-by-element' },
                        React.createElement("h5", null, "Subject Weight"),
                        React.createElement(NumberInput_1.NumberInput, { placeholder: "Initial subject weight (kg)", index: 0, change_function: this.handle_subject_weight_change, unit: 'kg', value: this.state.subject_weights[0] }),
                        React.createElement(NumberInput_1.NumberInput, { placeholder: "Final subject weight (kg)", index: 1, change_function: this.handle_subject_weight_change, unit: 'kg', value: this.state.subject_weights[1] })),
                    React.createElement("div", { className: 'inputs-by-element' },
                        React.createElement("h5", null, "Subject ID"),
                        React.createElement(core_1.InputGroup, { leftIcon: (this.state.subject_id ? "tick" : "circle-arrow-right"), className: '.bp3-fill', onChange: function (event) { return _this.setState({ subject_id: event.target.value }); }, placeholder: 'ID', value: this.state.subject_id }))),
                React.createElement("div", { className: 'submit-group' },
                    React.createElement(core_1.InputGroup, { placeholder: 'Results CSV filename (optional)', className: 'csv-name-input', onChange: function (event) {
                            return _this.setState({ csv_name: event.target.value });
                        } }),
                    React.createElement(core_1.Button, { onClick: this.submit_inputs, disabled: !all_inputs_validated }, "SUBMIT")),
                results_display)));
    };
    return DLWApp;
}(React.Component));
exports.DLWApp = DLWApp;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
