"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var core_1 = require("@blueprintjs/core");
var DateTimePicker = require("react-datetime");
var moment = require("moment");
var Requests_1 = require("./Requests");
var cjs_1 = require("@blueprintjs/core/lib/cjs");
var NumberInput_1 = require("./NumberInput");
var utilities_1 = require("./utilities");
var DeltaScatterChart_1 = require("./DeltaScatterChart");
var DEUTERIUM = "Deuterium";
var OXYGEN = "Oxygen 18";
var ELEMENTS = [DEUTERIUM, OXYGEN];
var NUM_SAMPLE_TIMES = 6;
var NUM_DELTAS = 5;
exports.DATE_LABELS = ['Background', 'Dose', 'PDA', 'PDB', 'EDA', 'EDB'];
exports.SAMPLE_LABELS = [exports.DATE_LABELS[0]].concat(exports.DATE_LABELS.slice(2, 6));
var DeltaUnits;
(function (DeltaUnits) {
    DeltaUnits["permil"] = "permil";
    DeltaUnits["ppm"] = "ppm";
})(DeltaUnits || (DeltaUnits = {}));
var AppToaster = core_1.Toaster.create({ className: "app-toaster", position: core_1.Position.TOP_RIGHT });
var DLWApp = /** @class */ (function (_super) {
    __extends(DLWApp, _super);
    function DLWApp(props) {
        var _this = _super.call(this, props) || this;
        _this.export = function () { return __awaiter(_this, void 0, void 0, function () {
            var results;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Requests_1.export_to_csv(this.state.new_csv_name)];
                    case 1:
                        results = _a.sent();
                        if (results.error) {
                            AppToaster.show({
                                message: "Error exporting results to csv. Please file a bug report at https://github.com/jchmyz/DoublyLabeledWater/issues",
                                intent: "danger",
                                timeout: 0
                            });
                        }
                        else {
                            AppToaster.show({
                                message: "Results successfully exported to " + results.saved_file,
                                intent: "success",
                                timeout: 3000
                            });
                        }
                        return [2 /*return*/];
                }
            });
        }); };
        _this.submit_inputs = function () { return __awaiter(_this, void 0, void 0, function () {
            var datetimes, calculated_results;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        datetimes = this.state.datetimes.map(function (value) {
                            return value.toArray();
                        });
                        // months are zero-indexed in Moment.js
                        datetimes.map(function (value) {
                            return value.splice(1, 1, value[1] + 1);
                        });
                        return [4 /*yield*/, Requests_1.calculate_from_inputs({
                                d_meas: this.state.deuterium_deltas,
                                o18_meas: this.state.oxygen_deltas,
                                datetimes: datetimes,
                                dose_weights: this.state.dose_weights,
                                dose_enrichments: this.state.dose_enrichments,
                                subject_weights: this.state.subject_weights,
                                subject_id: this.state.subject_id,
                                mixed_dose: this.state.mixed_dose,
                                in_permil: (this.state.delta_units === DeltaUnits.permil)
                            })];
                    case 1:
                        calculated_results = _a.sent();
                        if (calculated_results.results) {
                            this.setState({
                                results: {
                                    results: {
                                        calculations: calculated_results.results.calculations,
                                        schoeller: {
                                            rco2_ee_int: calculated_results.results.schoeller.rco2_ee_int,
                                            rco2_ee_plat: calculated_results.results.schoeller.rco2_ee_plat,
                                        },
                                        racette: {
                                            rco2_ee_int: calculated_results.results.racette.rco2_ee_int,
                                            rco2_ee_plat: calculated_results.results.racette.rco2_ee_plat
                                        },
                                        speakman: {
                                            rco2_ee_int: calculated_results.results.speakman.rco2_ee_int,
                                            rco2_ee_plat: calculated_results.results.speakman.rco2_ee_plat
                                        },
                                        error_flags: calculated_results.results.error_flags
                                    }
                                }
                            });
                            AppToaster.show({
                                message: "Results calculated successfully", intent: "success", timeout: 3000
                            });
                            if (this.scroll_anchor_ref.current)
                                this.scroll_anchor_ref.current.scrollIntoView({ behavior: "smooth" });
                        }
                        return [2 /*return*/];
                }
            });
        }); };
        _this.clear = function () {
            _this.setState({
                clear_popup_open: false,
                input_csv_name: "",
                deuterium_deltas: ["", "", "", "", ""],
                oxygen_deltas: ["", "", "", "", ""],
                datetimes: [_this.now, _this.now, _this.now, _this.now, _this.now, _this.now],
                dose_weights: ["", ""],
                dose_enrichments: ["", ""],
                subject_weights: ["", ""],
                dilution_space_ratio: "",
                subject_id: "",
                deuterium_deltas_validated: false,
                oxygen_deltas_validated: false,
                datetimes_validated: false,
                dose_weights_validated: false,
                dose_enrichments_validated: false,
                subject_weights_validated: false,
                results: { results: null },
            });
            // @ts-ignore
            document.getElementById('file-input').value = null;
        };
        _this.handle_csv_upload = function (event) { return __awaiter(_this, void 0, void 0, function () {
            var file, inputs, r, hit_error, inputted_d_deltas, inputted_o_deltas, i, inputted_dates, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        file = event.target.files[0];
                        if (!(file.type === "text/csv")) return [3 /*break*/, 2];
                        return [4 /*yield*/, Requests_1.load_from_csv(file)];
                    case 1:
                        inputs = _a.sent();
                        if (inputs.error || (inputs.results == null)) {
                            AppToaster.show({
                                message: "Error reading input CSV file. For formatting help, press 'Help' in the upper right hand corner",
                                intent: "danger",
                                timeout: 0
                            });
                        }
                        else {
                            this.clear();
                            this.setState({ input_csv_name: file.name });
                            r = inputs.results;
                            hit_error = false;
                            try {
                                inputted_d_deltas = [r.d_meas_1, r.d_meas_2, r.d_meas_3, r.d_meas_4, r.d_meas_5];
                                inputted_o_deltas = [r.o_meas_1, r.o_meas_2, r.o_meas_3, r.o_meas_4, r.o_meas_5];
                                for (i = 0; i < NUM_DELTAS; i++) {
                                    this.handle_deuterium_delta_change(i, inputted_d_deltas[i]);
                                    this.handle_oxygen_delta_change(i, inputted_o_deltas[i]);
                                }
                            }
                            catch (e) {
                                hit_error = true;
                            }
                            try {
                                inputted_dates = [r.sample_time_1, r.sample_time_2, r.sample_time_3, r.sample_time_4, r.sample_time_5, r.sample_time_6];
                                for (i = 0; i < NUM_SAMPLE_TIMES; i++) {
                                    if (inputted_dates[i]) {
                                        this.handle_date_change(i, inputted_dates[i]);
                                    }
                                }
                            }
                            catch (e) {
                                hit_error = true;
                            }
                            try {
                                if (r.dose_weight) {
                                    this.setState({ mixed_dose: true });
                                    this.handle_dose_weight_change(0, r.dose_weight);
                                }
                                else if (r.dose_weight_d && r.dose_weight_o) {
                                    this.handle_dose_weight_change(0, r.dose_weight_d);
                                    this.handle_dose_weight_change(1, r.dose_weight_o);
                                }
                            }
                            catch (e) {
                                hit_error = true;
                            }
                            try {
                                this.handle_dose_enrichment_change(0, r.dose_enrichment_d);
                                this.handle_dose_enrichment_change(1, r.dose_enrichment_o);
                                this.handle_subject_weight_change(0, r.subject_weight_initial);
                                this.handle_subject_weight_change(1, r.subject_weight_final);
                                this.handle_dilution_space_ratio_change(0, r.pop_dilution_space_ratio);
                                this.handle_subject_id_change(r.subject_id);
                            }
                            catch (e) {
                                hit_error = true;
                            }
                            if (hit_error) {
                                AppToaster.show({
                                    message: "One or more values not inputted automatically. Add manually, or fix CSV format." +
                                        " For formatting help, press 'Help' in the upper right hand corner",
                                    intent: "danger",
                                    timeout: 0
                                });
                            }
                            else {
                                AppToaster.show({
                                    message: "Inputs successfully loaded from ".concat(this.state.input_csv_name),
                                    intent: "primary",
                                    timeout: 3000
                                });
                            }
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        AppToaster.show({
                            message: "Select a .csv file. For formatting help, press 'Help' in the upper right hand corner",
                            intent: "danger",
                            timeout: 0
                        });
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        }); };
        _this.handle_csv_append_choice = function (event) {
            var file = event.target.files[0];
            if (file.type === "text/csv") {
                _this.setState({ append_csv_name: file.name });
            }
            else {
                AppToaster.show({
                    message: "Select an existing .csv file.",
                    intent: "danger",
                    timeout: 0
                });
            }
        };
        _this._bad_format = function (specific_error) {
            _this.setState({ input_csv_name: "" });
            var display_msg = "Incorrect .csv format." + specific_error + " See 'Help' for expected format.";
            AppToaster.show({ message: display_msg, intent: "danger", timeout: 0 });
        };
        _this._error_handler = function (event) {
            // @ts-ignore
            if (event.target.error.name == "NotReadableError") {
                AppToaster.show({
                    message: "File not readable. For formatting help, press 'Help' in the upper right hand corner",
                    intent: "danger",
                    timeout: 0
                });
            }
        };
        _this.check_numerical_inputs = function (input_aray) {
            for (var _i = 0, input_aray_1 = input_aray; _i < input_aray_1.length; _i++) {
                var value = input_aray_1[_i];
                if (isNaN(+value) || value === "") {
                    return false;
                }
            }
            return true;
        };
        _this._flag_non_numerical_input = function () {
            AppToaster.show({ message: "Enter a numeric value", intent: "danger", timeout: 3000 });
        };
        _this._flag_non_date_input = function () {
            AppToaster.show({ message: "Enter a valid date", intent: "danger", timeout: 3000 });
        };
        _this.handle_deuterium_delta_change = function (index, event) {
            var value = (typeof event === "string") ? event : event.target.value;
            var values_sep_by_spaces = value.split(" ");
            values_sep_by_spaces = values_sep_by_spaces.filter(function (value) { return value !== ""; });
            if (values_sep_by_spaces.length === 1 || value === "") {
                if (!isNaN(+value) || value === "") {
                    var new_deltas = _this.state.deuterium_deltas;
                    new_deltas.splice(index, 1, value);
                    _this.setState({
                        deuterium_deltas: new_deltas,
                        deuterium_deltas_validated: _this.check_numerical_inputs(new_deltas)
                    });
                }
                else
                    _this._flag_non_numerical_input();
            }
            else {
                for (var i = 0; i < values_sep_by_spaces.length; i++) {
                    _this.handle_deuterium_delta_change(index + i, values_sep_by_spaces[i]);
                }
            }
        };
        _this.handle_oxygen_delta_change = function (index, event) {
            var value = (typeof event === "string") ? event : event.target.value;
            var values_sep_by_spaces = value.split(" ");
            values_sep_by_spaces = values_sep_by_spaces.filter(function (value) { return value !== ""; });
            if (values_sep_by_spaces.length === 1 || value === "") {
                if (!isNaN(+value) || (value === "")) {
                    var new_deltas = _this.state.oxygen_deltas;
                    new_deltas.splice(index, 1, value);
                    _this.setState({
                        oxygen_deltas: new_deltas,
                        oxygen_deltas_validated: _this.check_numerical_inputs(new_deltas)
                    });
                }
                else
                    _this._flag_non_numerical_input();
            }
            else {
                for (var i = 0; i < values_sep_by_spaces.length; i++) {
                    _this.handle_oxygen_delta_change(index + i, values_sep_by_spaces[i]);
                }
            }
        };
        _this.handle_date_change = function (index, value) {
            var new_date_array = _this.state.datetimes;
            if (typeof value != "string") {
                var all_dates_filled = true;
                for (var j = 0; j < index; j++) {
                    if ((new_date_array[j] != _this.now) && value.isBefore(new_date_array[j])) {
                        AppToaster.show({
                            message: "Collection dates must be in chronological order.",
                            intent: "danger",
                            timeout: 0
                        });
                        return;
                    }
                    else if (value.isSame(new_date_array[j])) {
                        AppToaster.show({
                            message: "Duplicate collection dates entered", intent: "danger", timeout: 0
                        });
                        return;
                    }
                }
                new_date_array.splice(index, 1, value);
                for (var _i = 0, new_date_array_1 = new_date_array; _i < new_date_array_1.length; _i++) {
                    var date = new_date_array_1[_i];
                    if (date === _this.now) {
                        all_dates_filled = false;
                        break;
                    }
                }
                _this.setState({
                    datetimes: new_date_array,
                    datetimes_validated: all_dates_filled,
                });
            }
            else {
                var split_values = value.split(" ");
                if (value === "") {
                    new_date_array.splice(index, 1, _this.now);
                    _this.setState({ datetimes: new_date_array, datetimes_validated: false });
                }
                else {
                    var i = 0;
                    var skipped_indices = 0; // track indices to place dates in correct boxes
                    while (i < split_values.length) {
                        // deal with spaces between date and time
                        if (moment.parseZone(new Date(split_values[i])).isValid()) {
                            if (i < split_values.length - 1) {
                                if (moment.parseZone(new Date(split_values[i + 1])).isValid()) {
                                    //both valid dates- don't need to worry about spaces, treat them as separate dates
                                    var as_moment = utilities_1.default(split_values[i]);
                                    if (typeof as_moment !== "boolean") {
                                        _this.handle_date_change(index + i, as_moment);
                                    }
                                    i++;
                                }
                                else { // next value isn't a valid date- likely a time. tack it onto the date
                                    var as_moment = utilities_1.default(split_values[i].concat(" ", split_values[i + 1]));
                                    if (typeof as_moment !== "boolean") {
                                        _this.handle_date_change(index + i - skipped_indices, as_moment);
                                    }
                                    skipped_indices++;
                                    i += 2;
                                }
                            }
                            else {
                                var as_moment = utilities_1.default(split_values[i]);
                                if (typeof as_moment !== "boolean") {
                                    _this.handle_date_change(index + i, as_moment);
                                }
                                i++;
                            }
                        }
                        else {
                            _this._flag_non_date_input();
                            i++;
                        }
                    }
                }
            }
        };
        _this.handle_dose_weight_change = function (index, event) {
            if (_this.state.mixed_dose) {
                // if mixed, set both values to this
                _this.handle_dose_weight_change(1, event);
            }
            var value = (typeof event == "string") ? event : event.target.value;
            var values_sep_by_spaces = value.split(" ");
            values_sep_by_spaces = values_sep_by_spaces.filter(function (value) { return value !== ""; });
            if (values_sep_by_spaces.length === 1 || value === "") {
                if (!isNaN(+value) || value === "") {
                    var new_dose_weights = _this.state.dose_weights;
                    new_dose_weights.splice(index, 1, value);
                    _this.setState({
                        dose_weights: new_dose_weights,
                        dose_weights_validated: _this.check_numerical_inputs(new_dose_weights)
                    });
                }
                else
                    _this._flag_non_numerical_input();
            }
            else {
                for (var i = 0; i < values_sep_by_spaces.length; i++) {
                    _this.handle_dose_weight_change(index + i, values_sep_by_spaces[i]);
                }
            }
        };
        _this.handle_dose_enrichment_change = function (index, event) {
            var value = (typeof event == "string") ? event : event.target.value;
            var values_sep_by_spaces = value.split(" ");
            values_sep_by_spaces = values_sep_by_spaces.filter(function (value) { return value !== ""; });
            if (values_sep_by_spaces.length === 1 || value === "") {
                if (!isNaN(+value) || value === "") {
                    var new_enrichments = _this.state.dose_enrichments;
                    new_enrichments.splice(index, 1, value);
                    _this.setState({
                        dose_enrichments: new_enrichments,
                        dose_enrichments_validated: _this.check_numerical_inputs(new_enrichments)
                    });
                }
                else
                    _this._flag_non_numerical_input();
            }
            else {
                for (var i = 0; i < values_sep_by_spaces.length; i++) {
                    _this.handle_dose_enrichment_change(index + i, values_sep_by_spaces[i]);
                }
            }
        };
        _this.handle_subject_weight_change = function (index, event) {
            var value = (typeof event == "string") ? event : event.target.value;
            var values_sep_by_spaces = value.split(" ");
            values_sep_by_spaces = values_sep_by_spaces.filter(function (value) { return value !== ""; });
            if (values_sep_by_spaces.length === 1 || value === "") {
                if (!isNaN(+value) || value === "") {
                    var new_weights = _this.state.subject_weights;
                    new_weights.splice(index, 1, value);
                    _this.setState({
                        subject_weights: new_weights,
                        subject_weights_validated: _this.check_numerical_inputs(new_weights)
                    });
                }
                else
                    _this._flag_non_numerical_input();
            }
            else {
                for (var i = 0; i < values_sep_by_spaces.length; i++) {
                    _this.handle_subject_weight_change(index + i, values_sep_by_spaces[i]);
                }
            }
        };
        _this.handle_subject_id_change = function (event) {
            if (_this.state.results.results) {
                _this.setState({ clear_popup_open: true });
            }
            var value = (typeof event == "string") ? event : event.target.value;
            _this.setState({ subject_id: value });
        };
        _this.handle_dilution_space_ratio_change = function (index, event) {
            var value = (typeof event == "string") ? event : event.target.value;
            _this.setState({ dilution_space_ratio: value });
        };
        _this.now = moment();
        _this.scroll_anchor_ref = React.createRef();
        _this.state = {
            input_csv_name: "",
            info_overlay_open: false,
            clear_popup_open: false,
            delta_units: DeltaUnits.permil,
            deuterium_deltas: ["", "", "", "", ""],
            oxygen_deltas: ["", "", "", "", ""],
            datetimes: [_this.now, _this.now, _this.now, _this.now, _this.now, _this.now],
            dose_weights: ["", ""],
            dose_enrichments: ["", ""],
            mixed_dose: false,
            subject_weights: ["", ""],
            dilution_space_ratio: "",
            subject_id: "",
            deuterium_deltas_validated: false,
            oxygen_deltas_validated: false,
            datetimes_validated: false,
            dose_weights_validated: false,
            dose_enrichments_validated: false,
            subject_weights_validated: false,
            results: { results: null },
            new_csv_name: "", append_csv_name: ""
        };
        return _this;
    }
    DLWApp.prototype.render = function () {
        var _this = this;
        var all_inputs_validated = (this.state.deuterium_deltas_validated && this.state.oxygen_deltas_validated
            && this.state.datetimes_validated && this.state.dose_weights_validated
            && this.state.dose_enrichments_validated && this.state.subject_weights_validated
            && this.state.subject_id);
        var deuterium_delta_inputs = [];
        var oxygen_delta_inputs = [];
        var collection_time_inputs = [];
        var _loop_1 = function (i) {
            collection_time_inputs.push(React.createElement(DateTimePicker, { onChange: function (value) { return _this.handle_date_change(i, value); }, inputProps: {
                    className: 'date-input-box .bp3-input',
                    placeholder: ' ' + exports.DATE_LABELS[i] + ' sample date and time',
                    value: (this_1.state.datetimes[i] === this_1.now) ? "" : this_1.state.datetimes[i].format('YYYY-MM-DD HH:mm')
                }, key: i, value: this_1.state.datetimes[i], dateFormat: "YYYY-MM-DD", timeFormat: "HH:mm" }));
        };
        var this_1 = this;
        for (var i = 0; i < NUM_SAMPLE_TIMES; i++) {
            _loop_1(i);
        }
        for (var i = 0; i < NUM_DELTAS; i++) {
            deuterium_delta_inputs.push(React.createElement(NumberInput_1.NumberInput, { placeholder: exports.SAMPLE_LABELS[i] + " Deuterium delta", index: i, key: i, change_function: this.handle_deuterium_delta_change, unit: this.state.delta_units, value: this.state.deuterium_deltas[i] }));
            oxygen_delta_inputs.push(React.createElement(NumberInput_1.NumberInput, { placeholder: exports.SAMPLE_LABELS[i] + ' Oxygen 18 delta', index: i, key: i, unit: this.state.delta_units, change_function: this.handle_oxygen_delta_change, value: this.state.oxygen_deltas[i] }));
        }
        deuterium_delta_inputs.splice(1, 0, React.createElement("div", { className: 'delta-space' }));
        oxygen_delta_inputs.splice(1, 0, React.createElement("div", { className: 'delta-space' }));
        var dose_weight_inputs = [];
        var dose_enrichment_inputs = [];
        for (var i = 0; i < ELEMENTS.length; i++) {
            if (!this.state.mixed_dose) {
                dose_weight_inputs.push(React.createElement(NumberInput_1.NumberInput, { placeholder: ELEMENTS[i] + ' dose weight (g)', index: i, key: i, unit: "g", change_function: this.handle_dose_weight_change, value: this.state.dose_weights[i] }));
            }
            dose_enrichment_inputs.push(React.createElement(NumberInput_1.NumberInput, { placeholder: ELEMENTS[i] + ' dose enrichment (ppm)', index: i, key: i, change_function: this.handle_dose_enrichment_change, value: this.state.dose_enrichments[i], unit: "ppm" }));
        }
        if (this.state.mixed_dose) {
            dose_weight_inputs.push(React.createElement(NumberInput_1.NumberInput, { placeholder: "Dose weight (g)", index: 0, value: this.state.dose_weights[0], unit: "g", change_function: this.handle_dose_weight_change }));
        }
        var results_display = React.createElement("div", null);
        if (this.state.results.results) {
            var results_calculations = [];
            var results_error_flags = [];
            var results_schoeller_int = [];
            var results_schoeller_plat = [];
            var results_racette_int = [];
            var results_racette_plat = [];
            var results_speakman_int = [];
            var results_speakman_plat = [];
            results_calculations.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.results.calculations.ndp_kg[0] + ":"),
                React.createElement("p", { className: "result-value" }, this.state.results.results.calculations.ndp_kg[1] + " kg")));
            results_calculations.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.results.calculations.kd_hr[0] + ":"),
                React.createElement("p", { className: "result-value" }, this.state.results.results.calculations.kd_hr[1])));
            results_calculations.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.results.calculations.nop_kg[0] + ":"),
                React.createElement("p", { className: "result-value" }, this.state.results.results.calculations.nop_kg[1] + " kg")));
            results_calculations.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.results.calculations.ko_hr[0] + ":"),
                React.createElement("p", { className: "result-value" }, this.state.results.results.calculations.ko_hr[1])));
            results_calculations.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.results.calculations.body_water_avg_kg[0] + ":"),
                React.createElement("p", { className: "result-value" }, this.state.results.results.calculations.body_water_avg_kg[1] + " kg")));
            results_calculations.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.results.calculations.fat_free_mass_kg[0] + ":"),
                React.createElement("p", { className: "result-value" }, this.state.results.results.calculations.fat_free_mass_kg[1] + " kg")));
            results_calculations.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.results.calculations.fat_mass_kg[0] + ":"),
                React.createElement("p", { className: "result-value" }, this.state.results.results.calculations.fat_mass_kg[1] + " kg")));
            results_calculations.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.results.calculations.body_fat_percentage[0] + ":"),
                React.createElement("p", { className: "result-value" }, this.state.results.results.calculations.body_fat_percentage[1] + "%")));
            function push_calculated_results(element, result_set) {
                element.push(React.createElement("div", { className: 'result-pair' },
                    React.createElement("p", { className: "result-label" }, result_set.rco2_mol_day[0] + ":"),
                    React.createElement("p", { className: "result-value" }, result_set.rco2_mol_day[1] + " mol/day")));
                element.push(React.createElement("div", { className: 'result-pair' },
                    React.createElement("p", { className: "result-label" }, result_set.rco2_l_hr[0] + ":"),
                    React.createElement("p", { className: "result-value" }, result_set.rco2_l_hr[1] + " L/day")));
                element.push(React.createElement("div", { className: 'result-pair' },
                    React.createElement("p", { className: "result-label" }, result_set.ee_kcal_day[0] + ":"),
                    React.createElement("p", { className: "result-value" }, result_set.ee_kcal_day[1] + " kcal/day")));
                element.push(React.createElement("div", { className: 'result-pair' },
                    React.createElement("p", { className: "result-label" }, result_set.ee_mj_day[0] + ":"),
                    React.createElement("p", { className: "result-value" }, result_set.ee_mj_day[1] + " MJ/day")));
            }
            push_calculated_results(results_schoeller_int, this.state.results.results.schoeller.rco2_ee_int);
            push_calculated_results(results_schoeller_plat, this.state.results.results.schoeller.rco2_ee_plat);
            push_calculated_results(results_racette_int, this.state.results.results.racette.rco2_ee_int);
            push_calculated_results(results_racette_plat, this.state.results.results.racette.rco2_ee_plat);
            push_calculated_results(results_speakman_int, this.state.results.results.speakman.rco2_ee_int);
            push_calculated_results(results_speakman_plat, this.state.results.results.speakman.rco2_ee_plat);
            var error_okay = "error-okay";
            var outside_error_bars = "error-not-okay";
            var error_class = ((parseFloat(this.state.results.results.error_flags.plateau_2h[1]) < 0.05) ? error_okay : outside_error_bars);
            results_error_flags.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.results.error_flags.plateau_2h[0] + ":"),
                React.createElement("p", { className: "result-value " + error_class }, this.state.results.results.error_flags.plateau_2h[1] + '%')));
            error_class = ((parseFloat(this.state.results.results.error_flags.plateau_180[1]) < 0.05) ? error_okay : outside_error_bars);
            results_error_flags.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.results.error_flags.plateau_180[0] + ":"),
                React.createElement("p", { className: "result-value " + error_class }, this.state.results.results.error_flags.plateau_180[1] + '%')));
            error_class = ((parseFloat(this.state.results.results.error_flags.ds_ratio[1]) < 1.070 &&
                parseFloat(this.state.results.results.error_flags.ds_ratio[1]) > 1) ? error_okay : outside_error_bars);
            results_error_flags.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.results.error_flags.ds_ratio[0] + ":"),
                React.createElement("p", { className: "result-value " + error_class }, this.state.results.results.error_flags.ds_ratio[1])));
            error_class = ((parseFloat(this.state.results.results.error_flags.ee[1]) < 10) ? error_okay : outside_error_bars);
            results_error_flags.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.results.error_flags.ee[0] + ":"),
                React.createElement("p", { className: "result-value " + error_class }, this.state.results.results.error_flags.ee[1] + "%")));
            error_class = ((parseFloat(this.state.results.results.error_flags.ko_kd[1]) < 1.7 &&
                parseFloat(this.state.results.results.error_flags.ko_kd[1]) > 1.1) ? error_okay : outside_error_bars);
            results_error_flags.push(React.createElement("div", { className: 'result-pair' },
                React.createElement("p", { className: "result-label" }, this.state.results.results.error_flags.ko_kd[0] + ":"),
                React.createElement("p", { className: "result-value " + error_class }, this.state.results.results.error_flags.ko_kd[1])));
            var chart_data_d_meas = [];
            var chart_data_o18_meas = [];
            for (var i = 0; i < this.state.deuterium_deltas.length; i++) {
                chart_data_d_meas.push({ x: i, y: this.state.deuterium_deltas[i] });
                chart_data_o18_meas.push({ x: i, y: this.state.oxygen_deltas[i] });
            }
            var deltas_chart = (React.createElement(DeltaScatterChart_1.DeltaScatterChart, { delta_units: this.state.delta_units, chart_data_d_meas: chart_data_d_meas, chart_data_o18_meas: chart_data_o18_meas }));
            results_display = (React.createElement("div", { className: 'results-display', ref: this.scroll_anchor_ref },
                React.createElement(cjs_1.Card, { className: 'results-card' },
                    React.createElement("h1", null, 'Results for subject ' + this.state.subject_id),
                    React.createElement("div", { className: 'result-sections' },
                        React.createElement("div", { className: 'result-section' },
                            React.createElement("h5", { className: 'result-header-calc' }, "Calculations"),
                            results_calculations),
                        React.createElement("div", { className: 'result-section error-flags' },
                            React.createElement("h5", { className: 'result-header-error' }, "Error Flags"),
                            results_error_flags))),
                React.createElement(cjs_1.Card, { className: 'results-card' },
                    React.createElement("div", { className: 'result-sections calculation-types' },
                        React.createElement("div", { className: 'result-section' },
                            React.createElement("h2", null, "Schoeller"),
                            React.createElement("h5", { className: 'result-header-calc' }, "rCO2 and EE, intercept method"),
                            results_schoeller_int,
                            React.createElement("h5", { className: 'result-header-calc' }, "rCO2 and EE, plateau method"),
                            results_schoeller_plat),
                        React.createElement("div", { className: 'result-section' },
                            React.createElement("h2", null, "Racette"),
                            React.createElement("h5", { className: 'result-header-calc' }, "rCO2 and EE, intercept method"),
                            results_racette_int,
                            React.createElement("h5", { className: 'result-header-calc' }, "rCO2 and EE, plateau method"),
                            results_racette_plat),
                        React.createElement("div", { className: 'result-section' },
                            React.createElement("h2", null, "Speakman"),
                            React.createElement("h5", { className: 'result-header-calc' }, "rCO2 and EE, intercept method"),
                            results_speakman_int,
                            React.createElement("h5", { className: 'result-header-calc' }, "rCO2 and EE, plateau method"),
                            results_speakman_plat))),
                React.createElement(cjs_1.Card, { className: 'results-card' },
                    React.createElement("div", { className: 'result-sections' },
                        React.createElement("div", { className: 'result-section' },
                            React.createElement("h5", { className: 'chart-title' }, "Deuterium/O18 Measured Enrichments"),
                            deltas_chart)))));
        }
        return (React.createElement(cjs_1.Navbar, { className: 'dlw-nav' },
            React.createElement(core_1.Dialog, { isOpen: this.state.info_overlay_open, canEscapeKeyClose: true, canOutsideClickClose: false, hasBackdrop: true, isCloseButtonShown: true, onClose: function () {
                    _this.setState({ info_overlay_open: false });
                }, title: 'How to use the Doubly Labeled Water App' },
                React.createElement("p", { className: 'help-paragraph' },
                    "Mixed Dose: If checked, enter 18O and 2H enrichments of the dose as measured ",
                    React.createElement("strong", null, "after"),
                    " mixing.")),
            React.createElement(cjs_1.NavbarGroup, { align: core_1.Alignment.LEFT },
                React.createElement(cjs_1.Navbar.Heading, { className: 'dlw-title' }, "Doubly Labeled Water")),
            React.createElement(cjs_1.NavbarGroup, { align: core_1.Alignment.RIGHT },
                React.createElement(cjs_1.NavbarHeading, { className: 'tagline' }, "an open source project"),
                React.createElement("img", { src: "assets/logo_cuhs.png", alt: "University of Colorado Anschutz Medical Campus logo", style: { 'height': 30 } }),
                React.createElement(cjs_1.NavbarDivider, null),
                React.createElement("a", { href: "https://github.com/jchmyz/DoublyLabeledWater", target: "_blank" }, "DoublyLabeledWater on GitHub"),
                React.createElement(cjs_1.NavbarDivider, null),
                React.createElement(core_1.Button, { icon: "help", minimal: true, onClick: function () { return _this.setState({ info_overlay_open: true }); } }, "Help")),
            React.createElement(core_1.FormGroup, { className: 'dlw-app' },
                React.createElement("div", { className: 'subject-clear' },
                    React.createElement("div", null,
                        React.createElement("h5", null, "Subject ID"),
                        React.createElement(core_1.Popover, { isOpen: this.state.clear_popup_open, position: "right", content: React.createElement("div", { className: 'clear-popover' },
                                React.createElement("p", { className: 'help-paragraph' }, "Entering a new subject ID. Clear data inputs?"),
                                React.createElement("div", { className: 'popover-button-container' },
                                    React.createElement(core_1.Button, { className: 'popover-button', onClick: this.clear }, "CLEAR INPUTS"),
                                    React.createElement(core_1.Button, { className: 'popover-button', onClick: function () { return _this.setState({ clear_popup_open: false }); } }, "KEEP INPUTS"))) },
                            React.createElement(core_1.InputGroup, { leftIcon: (this.state.subject_id ? "tick" : "circle-arrow-right"), className: '.bp3-fill subject-id', onChange: this.handle_subject_id_change, placeholder: 'ID', value: this.state.subject_id }))),
                    React.createElement("div", null,
                        React.createElement(core_1.Button, { className: 'clear-button', onClick: this.clear }, "CLEAR INPUTS"))),
                React.createElement("div", { className: 'load-from-csv' },
                    React.createElement("h5", null, "Load input data from .csv file"),
                    React.createElement(core_1.FileInput, { text: this.state.input_csv_name || "Choose file...", inputProps: {
                            'accept': '.csv',
                            'id': 'file-input'
                        }, onInputChange: this.handle_csv_upload, disabled: !!(this.state.input_csv_name) })),
                React.createElement("div", { className: 'samples' },
                    React.createElement("div", { className: 'date-inputs' },
                        React.createElement("h5", null, "Collection Dates and Times"),
                        collection_time_inputs),
                    React.createElement("div", { className: 'delta-inputs' },
                        React.createElement("h5", null, "Deuterium Delta Values"),
                        deuterium_delta_inputs),
                    React.createElement("div", { className: 'delta-inputs' },
                        React.createElement("h5", null, "Oxygen 18 Delta Values"),
                        oxygen_delta_inputs),
                    React.createElement("div", { className: 'delta-unit-radio' },
                        React.createElement(core_1.RadioGroup, { onChange: function (event) {
                                _this.setState({ delta_units: event.target.value });
                            }, selectedValue: this.state.delta_units },
                            React.createElement(core_1.Radio, { label: "permil", value: DeltaUnits.permil, large: true }),
                            React.createElement(core_1.Radio, { label: "ppm", value: DeltaUnits.ppm, large: true })))),
                React.createElement("div", { className: 'element-wise-inputs' },
                    React.createElement("div", { className: 'mixed-dose' },
                        React.createElement("div", { className: 'mixed-dose-box' },
                            React.createElement(core_1.Checkbox, { checked: this.state.mixed_dose, labelElement: React.createElement("h5", null, "Mixed Dose"), large: true, onChange: function () {
                                    _this.setState({ mixed_dose: !_this.state.mixed_dose });
                                }, alignIndicator: core_1.Alignment.RIGHT })),
                        React.createElement(core_1.Button, { icon: "help", minimal: true, className: 'mixed-dose-help-button', onClick: function () { return _this.setState({ info_overlay_open: true }); } }))),
                React.createElement("div", { className: 'element-wise-inputs' },
                    React.createElement("div", { className: 'inputs-by-element' },
                        React.createElement("h5", null, ((this.state.mixed_dose) ? 'Dose Weight' : 'Dose Weights')),
                        dose_weight_inputs),
                    React.createElement("div", { className: 'inputs-by-element' },
                        React.createElement("h5", null, ((this.state.mixed_dose) ? 'Mixed Dose Enrichments' : 'Dose Enrichments')),
                        dose_enrichment_inputs)),
                React.createElement("div", { className: 'element-wise-inputs' },
                    React.createElement("div", { className: 'inputs-by-element' },
                        React.createElement("h5", null, "Subject Weight"),
                        React.createElement(NumberInput_1.NumberInput, { placeholder: "Initial subject weight (kg)", index: 0, change_function: this.handle_subject_weight_change, unit: 'kg', value: this.state.subject_weights[0] }),
                        React.createElement(NumberInput_1.NumberInput, { placeholder: "Final subject weight (kg)", index: 1, change_function: this.handle_subject_weight_change, unit: 'kg', value: this.state.subject_weights[1] })),
                    React.createElement("div", { className: 'inputs-by-element' },
                        React.createElement("h5", null, "Population Dilution Space Ratio"),
                        React.createElement(NumberInput_1.NumberInput, { placeholder: "Dilution space ratio", value: this.state.dilution_space_ratio, change_function: this.handle_dilution_space_ratio_change, unit: '', index: 0 })),
                    React.createElement(core_1.Button, { className: 'calculate-button', onClick: this.submit_inputs, intent: core_1.Intent.SUCCESS, disabled: !all_inputs_validated }, "CALCULATE RESULTS")),
                React.createElement("div", { className: 'submit-group' },
                    React.createElement("div", { className: 'csv-input-new' },
                        React.createElement("h5", null, "Input a name for a new .csv file"),
                        React.createElement(core_1.InputGroup, { placeholder: 'CSV filename', className: 'csv_input', onChange: function (event) {
                                return _this.setState({ new_csv_name: event.target.value });
                            } })),
                    React.createElement("div", { className: 'csv-append' },
                        React.createElement("h5", null, "Or, select an existing .csv file to append results to"),
                        React.createElement(core_1.FileInput, { text: this.state.append_csv_name || "Choose file...", onInputChange: this.handle_csv_append_choice, className: 'csv-input' })),
                    React.createElement(core_1.Button, { onClick: this.export, disabled: !(this.state.results.results && (this.state.new_csv_name || this.state.append_csv_name)), className: 'export-button', intent: core_1.Intent.SUCCESS }, "EXPORT TO CSV")),
                results_display)));
    };
    return DLWApp;
}(React.Component));
exports.DLWApp = DLWApp;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
